
0111 lab 3 exercise 1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002870  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  0800297c  0800297c  0001297c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029a4  080029a4  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  080029a4  080029a4  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029a4  080029a4  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029a4  080029a4  000129a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029a8  080029a8  000129a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080029ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  20000084  08002a30  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  08002a30  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009702  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d33  00000000  00000000  000297af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad8  00000000  00000000  0002b4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b8  00000000  00000000  0002bfc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000170f5  00000000  00000000  0002c978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cf89  00000000  00000000  00043a6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000823f7  00000000  00000000  000509f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d2ded  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a48  00000000  00000000  000d2e40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000084 	.word	0x20000084
 8000128:	00000000 	.word	0x00000000
 800012c:	08002964 	.word	0x08002964

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000088 	.word	0x20000088
 8000148:	08002964 	.word	0x08002964

0800014c <startAllButton>:
int keyPressingTimeInSecond[NUM_OF_BUTTON];


//all keyReg is at normal state
void startAllButton()
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	for (int i=0;i<=3;i++)
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e029      	b.n	80001ac <startAllButton+0x60>
	{
		for (int z=0;z<NUM_OF_BUTTON;z++)
 8000158:	2300      	movs	r3, #0
 800015a:	603b      	str	r3, [r7, #0]
 800015c:	e020      	b.n	80001a0 <startAllButton+0x54>
		{
			keyReg[i][z]=NORMAL_STATE;
 800015e:	4918      	ldr	r1, [pc, #96]	; (80001c0 <startAllButton+0x74>)
 8000160:	687a      	ldr	r2, [r7, #4]
 8000162:	4613      	mov	r3, r2
 8000164:	005b      	lsls	r3, r3, #1
 8000166:	4413      	add	r3, r2
 8000168:	683a      	ldr	r2, [r7, #0]
 800016a:	4413      	add	r3, r2
 800016c:	2201      	movs	r2, #1
 800016e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			button_flag[z]=0;
 8000172:	4a14      	ldr	r2, [pc, #80]	; (80001c4 <startAllButton+0x78>)
 8000174:	683b      	ldr	r3, [r7, #0]
 8000176:	2100      	movs	r1, #0
 8000178:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			is_button_pressing_flag[z]=0;
 800017c:	4a12      	ldr	r2, [pc, #72]	; (80001c8 <startAllButton+0x7c>)
 800017e:	683b      	ldr	r3, [r7, #0]
 8000180:	2100      	movs	r1, #0
 8000182:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			timerForKeyPressed[z]=KEY_PRESS_TIMING;
 8000186:	4a11      	ldr	r2, [pc, #68]	; (80001cc <startAllButton+0x80>)
 8000188:	683b      	ldr	r3, [r7, #0]
 800018a:	2164      	movs	r1, #100	; 0x64
 800018c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			keyPressingTimeInSecond[z]=0;
 8000190:	4a0f      	ldr	r2, [pc, #60]	; (80001d0 <startAllButton+0x84>)
 8000192:	683b      	ldr	r3, [r7, #0]
 8000194:	2100      	movs	r1, #0
 8000196:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int z=0;z<NUM_OF_BUTTON;z++)
 800019a:	683b      	ldr	r3, [r7, #0]
 800019c:	3301      	adds	r3, #1
 800019e:	603b      	str	r3, [r7, #0]
 80001a0:	683b      	ldr	r3, [r7, #0]
 80001a2:	2b02      	cmp	r3, #2
 80001a4:	dddb      	ble.n	800015e <startAllButton+0x12>
	for (int i=0;i<=3;i++)
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	3301      	adds	r3, #1
 80001aa:	607b      	str	r3, [r7, #4]
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	2b03      	cmp	r3, #3
 80001b0:	ddd2      	ble.n	8000158 <startAllButton+0xc>
		}
	}
}
 80001b2:	bf00      	nop
 80001b4:	bf00      	nop
 80001b6:	370c      	adds	r7, #12
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bc80      	pop	{r7}
 80001bc:	4770      	bx	lr
 80001be:	bf00      	nop
 80001c0:	200000ec 	.word	0x200000ec
 80001c4:	200000e0 	.word	0x200000e0
 80001c8:	200000d4 	.word	0x200000d4
 80001cc:	200000bc 	.word	0x200000bc
 80001d0:	200000c8 	.word	0x200000c8

080001d4 <isButtonPressed>:

//check if button is pressed
int isButtonPressed(int index)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	if(button_flag[index]==1)
 80001dc:	4a09      	ldr	r2, [pc, #36]	; (8000204 <isButtonPressed+0x30>)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001e4:	2b01      	cmp	r3, #1
 80001e6:	d106      	bne.n	80001f6 <isButtonPressed+0x22>
	{
		button_flag[index]=0;
 80001e8:	4a06      	ldr	r2, [pc, #24]	; (8000204 <isButtonPressed+0x30>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	2100      	movs	r1, #0
 80001ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80001f2:	2301      	movs	r3, #1
 80001f4:	e000      	b.n	80001f8 <isButtonPressed+0x24>
	}
	return 0;
 80001f6:	2300      	movs	r3, #0
}
 80001f8:	4618      	mov	r0, r3
 80001fa:	370c      	adds	r7, #12
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bc80      	pop	{r7}
 8000200:	4770      	bx	lr
 8000202:	bf00      	nop
 8000204:	200000e0 	.word	0x200000e0

08000208 <subKeyProcess>:
	return 0;
}


void subKeyProcess(int index)
{
 8000208:	b480      	push	{r7}
 800020a:	b083      	sub	sp, #12
 800020c:	af00      	add	r7, sp, #0
 800020e:	6078      	str	r0, [r7, #4]
	//TODO
	button_flag[index]=1;
 8000210:	4a04      	ldr	r2, [pc, #16]	; (8000224 <subKeyProcess+0x1c>)
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	2101      	movs	r1, #1
 8000216:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800021a:	bf00      	nop
 800021c:	370c      	adds	r7, #12
 800021e:	46bd      	mov	sp, r7
 8000220:	bc80      	pop	{r7}
 8000222:	4770      	bx	lr
 8000224:	200000e0 	.word	0x200000e0

08000228 <subKeyPressingProcess>:

void subKeyPressingProcess(int index)
{
 8000228:	b480      	push	{r7}
 800022a:	b083      	sub	sp, #12
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]
	//TODO
	is_button_pressing_flag[index]=1;
 8000230:	4a04      	ldr	r2, [pc, #16]	; (8000244 <subKeyPressingProcess+0x1c>)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	2101      	movs	r1, #1
 8000236:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800023a:	bf00      	nop
 800023c:	370c      	adds	r7, #12
 800023e:	46bd      	mov	sp, r7
 8000240:	bc80      	pop	{r7}
 8000242:	4770      	bx	lr
 8000244:	200000d4 	.word	0x200000d4

08000248 <getKeyInput>:


void getKeyInput()//this will go to interrupt
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
	//anti-vibration
	for(int k=0;k<NUM_OF_BUTTON;k++)
 800024e:	2300      	movs	r3, #0
 8000250:	607b      	str	r3, [r7, #4]
 8000252:	e083      	b.n	800035c <getKeyInput+0x114>
	{
	keyReg[0][k]=keyReg[1][k];
 8000254:	4a46      	ldr	r2, [pc, #280]	; (8000370 <getKeyInput+0x128>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	3303      	adds	r3, #3
 800025a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800025e:	4944      	ldr	r1, [pc, #272]	; (8000370 <getKeyInput+0x128>)
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	keyReg[1][k]=keyReg[2][k];
 8000266:	4a42      	ldr	r2, [pc, #264]	; (8000370 <getKeyInput+0x128>)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	3306      	adds	r3, #6
 800026c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000270:	493f      	ldr	r1, [pc, #252]	; (8000370 <getKeyInput+0x128>)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	3303      	adds	r3, #3
 8000276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	keyReg[2][k]=HAL_GPIO_ReadPin(buttonPort[k], buttonPin[k]);
 800027a:	4a3e      	ldr	r2, [pc, #248]	; (8000374 <getKeyInput+0x12c>)
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000282:	493d      	ldr	r1, [pc, #244]	; (8000378 <getKeyInput+0x130>)
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800028a:	4619      	mov	r1, r3
 800028c:	4610      	mov	r0, r2
 800028e:	f001 fb29 	bl	80018e4 <HAL_GPIO_ReadPin>
 8000292:	4603      	mov	r3, r0
 8000294:	4619      	mov	r1, r3
 8000296:	4a36      	ldr	r2, [pc, #216]	; (8000370 <getKeyInput+0x128>)
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	3306      	adds	r3, #6
 800029c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	//check if key is being pressed for 2s or more
	if((keyReg[0][k]==keyReg[1][k])&&(keyReg[1][k]==keyReg[2][k]))// keyReg2 is valid when this is true
 80002a0:	4a33      	ldr	r2, [pc, #204]	; (8000370 <getKeyInput+0x128>)
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002a8:	4931      	ldr	r1, [pc, #196]	; (8000370 <getKeyInput+0x128>)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	3303      	adds	r3, #3
 80002ae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002b2:	429a      	cmp	r2, r3
 80002b4:	d14f      	bne.n	8000356 <getKeyInput+0x10e>
 80002b6:	4a2e      	ldr	r2, [pc, #184]	; (8000370 <getKeyInput+0x128>)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	3303      	adds	r3, #3
 80002bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002c0:	492b      	ldr	r1, [pc, #172]	; (8000370 <getKeyInput+0x128>)
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	3306      	adds	r3, #6
 80002c6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002ca:	429a      	cmp	r2, r3
 80002cc:	d143      	bne.n	8000356 <getKeyInput+0x10e>
	{
		if(keyReg[3][k]!=keyReg[2][k])//check with last valid state
 80002ce:	4a28      	ldr	r2, [pc, #160]	; (8000370 <getKeyInput+0x128>)
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	3309      	adds	r3, #9
 80002d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002d8:	4925      	ldr	r1, [pc, #148]	; (8000370 <getKeyInput+0x128>)
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	3306      	adds	r3, #6
 80002de:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002e2:	429a      	cmp	r2, r3
 80002e4:	d019      	beq.n	800031a <getKeyInput+0xd2>
		{
			keyReg[3][k]=keyReg[2][k];//new state to last state
 80002e6:	4a22      	ldr	r2, [pc, #136]	; (8000370 <getKeyInput+0x128>)
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	3306      	adds	r3, #6
 80002ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002f0:	491f      	ldr	r1, [pc, #124]	; (8000370 <getKeyInput+0x128>)
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	3309      	adds	r3, #9
 80002f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(keyReg[2][k]==PRESSED_STATE)
 80002fa:	4a1d      	ldr	r2, [pc, #116]	; (8000370 <getKeyInput+0x128>)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	3306      	adds	r3, #6
 8000300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d126      	bne.n	8000356 <getKeyInput+0x10e>
			{
				//TODO
				subKeyProcess(k);
 8000308:	6878      	ldr	r0, [r7, #4]
 800030a:	f7ff ff7d 	bl	8000208 <subKeyProcess>
				timerForKeyPressed[k]=KEY_PRESS_TIMING;
 800030e:	4a1b      	ldr	r2, [pc, #108]	; (800037c <getKeyInput+0x134>)
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	2164      	movs	r1, #100	; 0x64
 8000314:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000318:	e01d      	b.n	8000356 <getKeyInput+0x10e>
			}
		}
		else //active button again if keeping pressing (for every 2s)
		{
			timerForKeyPressed[k]--;
 800031a:	4a18      	ldr	r2, [pc, #96]	; (800037c <getKeyInput+0x134>)
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000322:	1e5a      	subs	r2, r3, #1
 8000324:	4915      	ldr	r1, [pc, #84]	; (800037c <getKeyInput+0x134>)
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timerForKeyPressed[k]==0)
 800032c:	4a13      	ldr	r2, [pc, #76]	; (800037c <getKeyInput+0x134>)
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000334:	2b00      	cmp	r3, #0
 8000336:	d10e      	bne.n	8000356 <getKeyInput+0x10e>
			{
				if(keyReg[2][k]==PRESSED_STATE)
 8000338:	4a0d      	ldr	r2, [pc, #52]	; (8000370 <getKeyInput+0x128>)
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	3306      	adds	r3, #6
 800033e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000342:	2b00      	cmp	r3, #0
 8000344:	d107      	bne.n	8000356 <getKeyInput+0x10e>
				{
					//TODO
					subKeyPressingProcess(k);
 8000346:	6878      	ldr	r0, [r7, #4]
 8000348:	f7ff ff6e 	bl	8000228 <subKeyPressingProcess>
					timerForKeyPressed[k]=KEY_PRESS_TIMING;
 800034c:	4a0b      	ldr	r2, [pc, #44]	; (800037c <getKeyInput+0x134>)
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	2164      	movs	r1, #100	; 0x64
 8000352:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int k=0;k<NUM_OF_BUTTON;k++)
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	3301      	adds	r3, #1
 800035a:	607b      	str	r3, [r7, #4]
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	2b02      	cmp	r3, #2
 8000360:	f77f af78 	ble.w	8000254 <getKeyInput+0xc>

			}
		}
	}
	}
}
 8000364:	bf00      	nop
 8000366:	bf00      	nop
 8000368:	3708      	adds	r7, #8
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	200000ec 	.word	0x200000ec
 8000374:	20000000 	.word	0x20000000
 8000378:	0800298c 	.word	0x0800298c
 800037c:	200000bc 	.word	0x200000bc

08000380 <OffAllLed>:
int bufferFor7SEG[4]={0,0,0,0};//mode1-2 then set value 1-2
int bufferForTrafficLight[3]={5,2,3};//start with 5s Red


void OffAllLed()
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MODE_LED_GPIO_Port, MODE_LED_Pin, 1);
 8000384:	2201      	movs	r2, #1
 8000386:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800038a:	480b      	ldr	r0, [pc, #44]	; (80003b8 <OffAllLed+0x38>)
 800038c:	f001 fac1 	bl	8001912 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MODE_LED_2_GPIO_Port, MODE_LED_2_Pin, 1);
 8000390:	2201      	movs	r2, #1
 8000392:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000396:	4808      	ldr	r0, [pc, #32]	; (80003b8 <OffAllLed+0x38>)
 8000398:	f001 fabb 	bl	8001912 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SET_VALUE_LED_GPIO_Port, SET_VALUE_LED_Pin, 1);
 800039c:	2201      	movs	r2, #1
 800039e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003a2:	4805      	ldr	r0, [pc, #20]	; (80003b8 <OffAllLed+0x38>)
 80003a4:	f001 fab5 	bl	8001912 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SET_VALUE_LED_2_GPIO_Port, SET_VALUE_LED_2_Pin, 1);
 80003a8:	2201      	movs	r2, #1
 80003aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003ae:	4802      	ldr	r0, [pc, #8]	; (80003b8 <OffAllLed+0x38>)
 80003b0:	f001 faaf 	bl	8001912 <HAL_GPIO_WritePin>
}
 80003b4:	bf00      	nop
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	40010800 	.word	0x40010800

080003bc <modeLedRun>:

void modeLedRun()
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
	display7SEG(bufferFor7SEG[0]);
 80003c0:	4b06      	ldr	r3, [pc, #24]	; (80003dc <modeLedRun+0x20>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	4618      	mov	r0, r3
 80003c6:	f000 fd31 	bl	8000e2c <display7SEG>
	HAL_GPIO_WritePin(MODE_LED_GPIO_Port, MODE_LED_Pin, 0);
 80003ca:	2200      	movs	r2, #0
 80003cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003d0:	4803      	ldr	r0, [pc, #12]	; (80003e0 <modeLedRun+0x24>)
 80003d2:	f001 fa9e 	bl	8001912 <HAL_GPIO_WritePin>
}
 80003d6:	bf00      	nop
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	200000a0 	.word	0x200000a0
 80003e0:	40010800 	.word	0x40010800

080003e4 <modeLed2Run>:

void modeLed2Run()
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
	display7SEG(bufferFor7SEG[1]);
 80003e8:	4b06      	ldr	r3, [pc, #24]	; (8000404 <modeLed2Run+0x20>)
 80003ea:	685b      	ldr	r3, [r3, #4]
 80003ec:	4618      	mov	r0, r3
 80003ee:	f000 fd1d 	bl	8000e2c <display7SEG>
	HAL_GPIO_WritePin(MODE_LED_2_GPIO_Port, MODE_LED_2_Pin, 0);
 80003f2:	2200      	movs	r2, #0
 80003f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003f8:	4803      	ldr	r0, [pc, #12]	; (8000408 <modeLed2Run+0x24>)
 80003fa:	f001 fa8a 	bl	8001912 <HAL_GPIO_WritePin>
}
 80003fe:	bf00      	nop
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	200000a0 	.word	0x200000a0
 8000408:	40010800 	.word	0x40010800

0800040c <setValueLedRun>:

void setValueLedRun()
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
	display7SEG(bufferFor7SEG[2]);
 8000410:	4b06      	ldr	r3, [pc, #24]	; (800042c <setValueLedRun+0x20>)
 8000412:	689b      	ldr	r3, [r3, #8]
 8000414:	4618      	mov	r0, r3
 8000416:	f000 fd09 	bl	8000e2c <display7SEG>
	HAL_GPIO_WritePin(SET_VALUE_LED_GPIO_Port, SET_VALUE_LED_Pin, 0);
 800041a:	2200      	movs	r2, #0
 800041c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000420:	4803      	ldr	r0, [pc, #12]	; (8000430 <setValueLedRun+0x24>)
 8000422:	f001 fa76 	bl	8001912 <HAL_GPIO_WritePin>
}
 8000426:	bf00      	nop
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	200000a0 	.word	0x200000a0
 8000430:	40010800 	.word	0x40010800

08000434 <setValue2LedRun>:

void setValue2LedRun()
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
	display7SEG(bufferFor7SEG[3]);
 8000438:	4b06      	ldr	r3, [pc, #24]	; (8000454 <setValue2LedRun+0x20>)
 800043a:	68db      	ldr	r3, [r3, #12]
 800043c:	4618      	mov	r0, r3
 800043e:	f000 fcf5 	bl	8000e2c <display7SEG>
	HAL_GPIO_WritePin(SET_VALUE_LED_2_GPIO_Port, SET_VALUE_LED_2_Pin, 0);
 8000442:	2200      	movs	r2, #0
 8000444:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000448:	4803      	ldr	r0, [pc, #12]	; (8000458 <setValue2LedRun+0x24>)
 800044a:	f001 fa62 	bl	8001912 <HAL_GPIO_WritePin>
}
 800044e:	bf00      	nop
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	200000a0 	.word	0x200000a0
 8000458:	40010800 	.word	0x40010800

0800045c <fsm_7seg_led>:




void fsm_7seg_led ()
  {
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
		if(isTimerDone(1))
 8000460:	2001      	movs	r0, #1
 8000462:	f000 fee5 	bl	8001230 <isTimerDone>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d041      	beq.n	80004f0 <fsm_7seg_led+0x94>
		{

			switch (led7SEGindex)
 800046c:	4b21      	ldr	r3, [pc, #132]	; (80004f4 <fsm_7seg_led+0x98>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	3b14      	subs	r3, #20
 8000472:	2b03      	cmp	r3, #3
 8000474:	d82e      	bhi.n	80004d4 <fsm_7seg_led+0x78>
 8000476:	a201      	add	r2, pc, #4	; (adr r2, 800047c <fsm_7seg_led+0x20>)
 8000478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800047c:	0800048d 	.word	0x0800048d
 8000480:	0800049f 	.word	0x0800049f
 8000484:	080004b1 	.word	0x080004b1
 8000488:	080004c3 	.word	0x080004c3
			{
			case MODE_LED:
					OffAllLed();
 800048c:	f7ff ff78 	bl	8000380 <OffAllLed>
					setTimer(LED_7SEG_BLINK_PERIOD/4,1);
 8000490:	2101      	movs	r1, #1
 8000492:	20fa      	movs	r0, #250	; 0xfa
 8000494:	f000 feb2 	bl	80011fc <setTimer>
					modeLedRun();
 8000498:	f7ff ff90 	bl	80003bc <modeLedRun>
				break;
 800049c:	e01b      	b.n	80004d6 <fsm_7seg_led+0x7a>
			case MODE_LED_2:
					OffAllLed();
 800049e:	f7ff ff6f 	bl	8000380 <OffAllLed>
					setTimer(LED_7SEG_BLINK_PERIOD/4,1);
 80004a2:	2101      	movs	r1, #1
 80004a4:	20fa      	movs	r0, #250	; 0xfa
 80004a6:	f000 fea9 	bl	80011fc <setTimer>
					modeLed2Run();
 80004aa:	f7ff ff9b 	bl	80003e4 <modeLed2Run>
				break;
 80004ae:	e012      	b.n	80004d6 <fsm_7seg_led+0x7a>
			case SET_VALUE_LED:
					OffAllLed();
 80004b0:	f7ff ff66 	bl	8000380 <OffAllLed>
					setTimer(LED_7SEG_BLINK_PERIOD/4,1);
 80004b4:	2101      	movs	r1, #1
 80004b6:	20fa      	movs	r0, #250	; 0xfa
 80004b8:	f000 fea0 	bl	80011fc <setTimer>
					setValueLedRun();
 80004bc:	f7ff ffa6 	bl	800040c <setValueLedRun>
				break;
 80004c0:	e009      	b.n	80004d6 <fsm_7seg_led+0x7a>
			case SET_VALUE_LED_2:
					OffAllLed();
 80004c2:	f7ff ff5d 	bl	8000380 <OffAllLed>
					setTimer(LED_7SEG_BLINK_PERIOD/4,1);
 80004c6:	2101      	movs	r1, #1
 80004c8:	20fa      	movs	r0, #250	; 0xfa
 80004ca:	f000 fe97 	bl	80011fc <setTimer>
					setValue2LedRun();
 80004ce:	f7ff ffb1 	bl	8000434 <setValue2LedRun>
				break;
 80004d2:	e000      	b.n	80004d6 <fsm_7seg_led+0x7a>
			default:
				break;
 80004d4:	bf00      	nop
			}
			led7SEGindex=((led7SEGindex+1)%4)+MODE_LED;
 80004d6:	4b07      	ldr	r3, [pc, #28]	; (80004f4 <fsm_7seg_led+0x98>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	3301      	adds	r3, #1
 80004dc:	425a      	negs	r2, r3
 80004de:	f003 0303 	and.w	r3, r3, #3
 80004e2:	f002 0203 	and.w	r2, r2, #3
 80004e6:	bf58      	it	pl
 80004e8:	4253      	negpl	r3, r2
 80004ea:	3314      	adds	r3, #20
 80004ec:	4a01      	ldr	r2, [pc, #4]	; (80004f4 <fsm_7seg_led+0x98>)
 80004ee:	6013      	str	r3, [r2, #0]
		}

  }
 80004f0:	bf00      	nop
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	20000020 	.word	0x20000020

080004f8 <blink_Red2Hz>:

#include "fsm_mode_change.h"
#include "fsm_traffic_light.h"
//blink 2Hz
void blink_Red2Hz()
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(RED_HOR_GPIO_Port, RED_HOR_Pin);
 80004fc:	2120      	movs	r1, #32
 80004fe:	4805      	ldr	r0, [pc, #20]	; (8000514 <blink_Red2Hz+0x1c>)
 8000500:	f001 fa1f 	bl	8001942 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(RED_VER_GPIO_Port, RED_VER_Pin);
 8000504:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000508:	4802      	ldr	r0, [pc, #8]	; (8000514 <blink_Red2Hz+0x1c>)
 800050a:	f001 fa1a 	bl	8001942 <HAL_GPIO_TogglePin>
}
 800050e:	bf00      	nop
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	40010800 	.word	0x40010800

08000518 <blink_Yellow2Hz>:

void blink_Yellow2Hz()
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(YELLOW_HOR_GPIO_Port, YELLOW_HOR_Pin);
 800051c:	2140      	movs	r1, #64	; 0x40
 800051e:	4805      	ldr	r0, [pc, #20]	; (8000534 <blink_Yellow2Hz+0x1c>)
 8000520:	f001 fa0f 	bl	8001942 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(YELLOW_VER_GPIO_Port, YELLOW_VER_Pin);
 8000524:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000528:	4802      	ldr	r0, [pc, #8]	; (8000534 <blink_Yellow2Hz+0x1c>)
 800052a:	f001 fa0a 	bl	8001942 <HAL_GPIO_TogglePin>
}
 800052e:	bf00      	nop
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	40010800 	.word	0x40010800

08000538 <blink_Green2Hz>:

void blink_Green2Hz()
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GREEN_HOR_GPIO_Port, GREEN_HOR_Pin);
 800053c:	2180      	movs	r1, #128	; 0x80
 800053e:	4805      	ldr	r0, [pc, #20]	; (8000554 <blink_Green2Hz+0x1c>)
 8000540:	f001 f9ff 	bl	8001942 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GREEN_VER_GPIO_Port, GREEN_VER_Pin);
 8000544:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000548:	4802      	ldr	r0, [pc, #8]	; (8000554 <blink_Green2Hz+0x1c>)
 800054a:	f001 f9fa 	bl	8001942 <HAL_GPIO_TogglePin>
}
 800054e:	bf00      	nop
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	40010800 	.word	0x40010800

08000558 <updateBufferRed>:

//update buffer
void updateBufferRed()
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
	bufferFor7SEG[0]=bufferForTrafficLight[0]/10;
 800055c:	4b0e      	ldr	r3, [pc, #56]	; (8000598 <updateBufferRed+0x40>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a0e      	ldr	r2, [pc, #56]	; (800059c <updateBufferRed+0x44>)
 8000562:	fb82 1203 	smull	r1, r2, r2, r3
 8000566:	1092      	asrs	r2, r2, #2
 8000568:	17db      	asrs	r3, r3, #31
 800056a:	1ad3      	subs	r3, r2, r3
 800056c:	4a0c      	ldr	r2, [pc, #48]	; (80005a0 <updateBufferRed+0x48>)
 800056e:	6013      	str	r3, [r2, #0]
	bufferFor7SEG[1]=bufferForTrafficLight[0]%10;
 8000570:	4b09      	ldr	r3, [pc, #36]	; (8000598 <updateBufferRed+0x40>)
 8000572:	6819      	ldr	r1, [r3, #0]
 8000574:	4b09      	ldr	r3, [pc, #36]	; (800059c <updateBufferRed+0x44>)
 8000576:	fb83 2301 	smull	r2, r3, r3, r1
 800057a:	109a      	asrs	r2, r3, #2
 800057c:	17cb      	asrs	r3, r1, #31
 800057e:	1ad2      	subs	r2, r2, r3
 8000580:	4613      	mov	r3, r2
 8000582:	009b      	lsls	r3, r3, #2
 8000584:	4413      	add	r3, r2
 8000586:	005b      	lsls	r3, r3, #1
 8000588:	1aca      	subs	r2, r1, r3
 800058a:	4b05      	ldr	r3, [pc, #20]	; (80005a0 <updateBufferRed+0x48>)
 800058c:	605a      	str	r2, [r3, #4]
}
 800058e:	bf00      	nop
 8000590:	46bd      	mov	sp, r7
 8000592:	bc80      	pop	{r7}
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	2000000c 	.word	0x2000000c
 800059c:	66666667 	.word	0x66666667
 80005a0:	200000a0 	.word	0x200000a0

080005a4 <updateBufferYellow>:

void updateBufferYellow()
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
	bufferFor7SEG[0]=bufferForTrafficLight[1]/10;
 80005a8:	4b0e      	ldr	r3, [pc, #56]	; (80005e4 <updateBufferYellow+0x40>)
 80005aa:	685b      	ldr	r3, [r3, #4]
 80005ac:	4a0e      	ldr	r2, [pc, #56]	; (80005e8 <updateBufferYellow+0x44>)
 80005ae:	fb82 1203 	smull	r1, r2, r2, r3
 80005b2:	1092      	asrs	r2, r2, #2
 80005b4:	17db      	asrs	r3, r3, #31
 80005b6:	1ad3      	subs	r3, r2, r3
 80005b8:	4a0c      	ldr	r2, [pc, #48]	; (80005ec <updateBufferYellow+0x48>)
 80005ba:	6013      	str	r3, [r2, #0]
	bufferFor7SEG[1]=bufferForTrafficLight[1]%10;
 80005bc:	4b09      	ldr	r3, [pc, #36]	; (80005e4 <updateBufferYellow+0x40>)
 80005be:	6859      	ldr	r1, [r3, #4]
 80005c0:	4b09      	ldr	r3, [pc, #36]	; (80005e8 <updateBufferYellow+0x44>)
 80005c2:	fb83 2301 	smull	r2, r3, r3, r1
 80005c6:	109a      	asrs	r2, r3, #2
 80005c8:	17cb      	asrs	r3, r1, #31
 80005ca:	1ad2      	subs	r2, r2, r3
 80005cc:	4613      	mov	r3, r2
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	4413      	add	r3, r2
 80005d2:	005b      	lsls	r3, r3, #1
 80005d4:	1aca      	subs	r2, r1, r3
 80005d6:	4b05      	ldr	r3, [pc, #20]	; (80005ec <updateBufferYellow+0x48>)
 80005d8:	605a      	str	r2, [r3, #4]
}
 80005da:	bf00      	nop
 80005dc:	46bd      	mov	sp, r7
 80005de:	bc80      	pop	{r7}
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	2000000c 	.word	0x2000000c
 80005e8:	66666667 	.word	0x66666667
 80005ec:	200000a0 	.word	0x200000a0

080005f0 <updateBufferGreen>:

void updateBufferGreen()
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
	bufferFor7SEG[0]=bufferForTrafficLight[2]/10;
 80005f4:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <updateBufferGreen+0x40>)
 80005f6:	689b      	ldr	r3, [r3, #8]
 80005f8:	4a0e      	ldr	r2, [pc, #56]	; (8000634 <updateBufferGreen+0x44>)
 80005fa:	fb82 1203 	smull	r1, r2, r2, r3
 80005fe:	1092      	asrs	r2, r2, #2
 8000600:	17db      	asrs	r3, r3, #31
 8000602:	1ad3      	subs	r3, r2, r3
 8000604:	4a0c      	ldr	r2, [pc, #48]	; (8000638 <updateBufferGreen+0x48>)
 8000606:	6013      	str	r3, [r2, #0]
	bufferFor7SEG[1]=bufferForTrafficLight[2]%10;
 8000608:	4b09      	ldr	r3, [pc, #36]	; (8000630 <updateBufferGreen+0x40>)
 800060a:	6899      	ldr	r1, [r3, #8]
 800060c:	4b09      	ldr	r3, [pc, #36]	; (8000634 <updateBufferGreen+0x44>)
 800060e:	fb83 2301 	smull	r2, r3, r3, r1
 8000612:	109a      	asrs	r2, r3, #2
 8000614:	17cb      	asrs	r3, r1, #31
 8000616:	1ad2      	subs	r2, r2, r3
 8000618:	4613      	mov	r3, r2
 800061a:	009b      	lsls	r3, r3, #2
 800061c:	4413      	add	r3, r2
 800061e:	005b      	lsls	r3, r3, #1
 8000620:	1aca      	subs	r2, r1, r3
 8000622:	4b05      	ldr	r3, [pc, #20]	; (8000638 <updateBufferGreen+0x48>)
 8000624:	605a      	str	r2, [r3, #4]
}
 8000626:	bf00      	nop
 8000628:	46bd      	mov	sp, r7
 800062a:	bc80      	pop	{r7}
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	2000000c 	.word	0x2000000c
 8000634:	66666667 	.word	0x66666667
 8000638:	200000a0 	.word	0x200000a0

0800063c <modeNum>:

void modeNum(int mode)
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
	bufferFor7SEG[2]=0;
 8000644:	4b05      	ldr	r3, [pc, #20]	; (800065c <modeNum+0x20>)
 8000646:	2200      	movs	r2, #0
 8000648:	609a      	str	r2, [r3, #8]
	bufferFor7SEG[3]=mode;
 800064a:	4a04      	ldr	r2, [pc, #16]	; (800065c <modeNum+0x20>)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	60d3      	str	r3, [r2, #12]
}
 8000650:	bf00      	nop
 8000652:	370c      	adds	r7, #12
 8000654:	46bd      	mov	sp, r7
 8000656:	bc80      	pop	{r7}
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	200000a0 	.word	0x200000a0

08000660 <fsm_mode_change>:

//vertical is main road, we works on main road
void fsm_mode_change()
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
	switch(mode)
 8000664:	4b7e      	ldr	r3, [pc, #504]	; (8000860 <fsm_mode_change+0x200>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	3b0a      	subs	r3, #10
 800066a:	2b03      	cmp	r3, #3
 800066c:	f200 80ec 	bhi.w	8000848 <fsm_mode_change+0x1e8>
 8000670:	a201      	add	r2, pc, #4	; (adr r2, 8000678 <fsm_mode_change+0x18>)
 8000672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000676:	bf00      	nop
 8000678:	08000689 	.word	0x08000689
 800067c:	080006ad 	.word	0x080006ad
 8000680:	0800073b 	.word	0x0800073b
 8000684:	080007c7 	.word	0x080007c7
	{
	case NORMAL_MODE:
		if(isButtonPressed(MODE_BUTTON))
 8000688:	2000      	movs	r0, #0
 800068a:	f7ff fda3 	bl	80001d4 <isButtonPressed>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	f000 80db 	beq.w	800084c <fsm_mode_change+0x1ec>
		{
			mode=RED_MODE;
 8000696:	4b72      	ldr	r3, [pc, #456]	; (8000860 <fsm_mode_change+0x200>)
 8000698:	220b      	movs	r2, #11
 800069a:	601a      	str	r2, [r3, #0]
			setTimer(500,0);//2Hz
 800069c:	2100      	movs	r1, #0
 800069e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006a2:	f000 fdab 	bl	80011fc <setTimer>
			offAllTrafficLight();
 80006a6:	f000 f8e1 	bl	800086c <offAllTrafficLight>
		}
//			fsm_traffic_light();
		break;
 80006aa:	e0cf      	b.n	800084c <fsm_mode_change+0x1ec>
	case RED_MODE:
		modeNum(2);
 80006ac:	2002      	movs	r0, #2
 80006ae:	f7ff ffc5 	bl	800063c <modeNum>
		//blink 2Hz
		if(isTimerDone(1))
 80006b2:	2001      	movs	r0, #1
 80006b4:	f000 fdbc 	bl	8001230 <isTimerDone>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d006      	beq.n	80006cc <fsm_mode_change+0x6c>
		{
			blink_Red2Hz();
 80006be:	f7ff ff1b 	bl	80004f8 <blink_Red2Hz>
			setTimer(500,0);
 80006c2:	2100      	movs	r1, #0
 80006c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006c8:	f000 fd98 	bl	80011fc <setTimer>
		}

		//update value
		if(isButtonPressed(TIME_BUTTON))
 80006cc:	2001      	movs	r0, #1
 80006ce:	f7ff fd81 	bl	80001d4 <isButtonPressed>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d011      	beq.n	80006fc <fsm_mode_change+0x9c>
		{
			bufferForTrafficLight[0]=(bufferForTrafficLight[0]%99)+1;//1-99
 80006d8:	4b62      	ldr	r3, [pc, #392]	; (8000864 <fsm_mode_change+0x204>)
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	4b62      	ldr	r3, [pc, #392]	; (8000868 <fsm_mode_change+0x208>)
 80006de:	fb83 1302 	smull	r1, r3, r3, r2
 80006e2:	4413      	add	r3, r2
 80006e4:	1199      	asrs	r1, r3, #6
 80006e6:	17d3      	asrs	r3, r2, #31
 80006e8:	1ac9      	subs	r1, r1, r3
 80006ea:	460b      	mov	r3, r1
 80006ec:	005b      	lsls	r3, r3, #1
 80006ee:	440b      	add	r3, r1
 80006f0:	0159      	lsls	r1, r3, #5
 80006f2:	440b      	add	r3, r1
 80006f4:	1ad1      	subs	r1, r2, r3
 80006f6:	1c4b      	adds	r3, r1, #1
 80006f8:	4a5a      	ldr	r2, [pc, #360]	; (8000864 <fsm_mode_change+0x204>)
 80006fa:	6013      	str	r3, [r2, #0]
		}
			updateBufferRed();
 80006fc:	f7ff ff2c 	bl	8000558 <updateBufferRed>

		//change mode
		if(isButtonPressed(MODE_BUTTON))
 8000700:	2000      	movs	r0, #0
 8000702:	f7ff fd67 	bl	80001d4 <isButtonPressed>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d009      	beq.n	8000720 <fsm_mode_change+0xc0>
		{
			mode=YELLOW_MODE;
 800070c:	4b54      	ldr	r3, [pc, #336]	; (8000860 <fsm_mode_change+0x200>)
 800070e:	220c      	movs	r2, #12
 8000710:	601a      	str	r2, [r3, #0]
			setTimer(500,0);//2Hz
 8000712:	2100      	movs	r1, #0
 8000714:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000718:	f000 fd70 	bl	80011fc <setTimer>
			offAllTrafficLight();
 800071c:	f000 f8a6 	bl	800086c <offAllTrafficLight>
		}

		//return normal
		if(isButtonPressed(SET_VALUE_BUTTON))
 8000720:	2002      	movs	r0, #2
 8000722:	f7ff fd57 	bl	80001d4 <isButtonPressed>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	f000 8091 	beq.w	8000850 <fsm_mode_change+0x1f0>
		{
			mode=NORMAL_MODE;
 800072e:	4b4c      	ldr	r3, [pc, #304]	; (8000860 <fsm_mode_change+0x200>)
 8000730:	220a      	movs	r2, #10
 8000732:	601a      	str	r2, [r3, #0]
			offAllTrafficLight();
 8000734:	f000 f89a 	bl	800086c <offAllTrafficLight>
		}
		break;
 8000738:	e08a      	b.n	8000850 <fsm_mode_change+0x1f0>
	case YELLOW_MODE:
		modeNum(3);
 800073a:	2003      	movs	r0, #3
 800073c:	f7ff ff7e 	bl	800063c <modeNum>
		//blink 2Hz
		if(isTimerDone(1))
 8000740:	2001      	movs	r0, #1
 8000742:	f000 fd75 	bl	8001230 <isTimerDone>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d006      	beq.n	800075a <fsm_mode_change+0xfa>
		{
			blink_Yellow2Hz();
 800074c:	f7ff fee4 	bl	8000518 <blink_Yellow2Hz>
			setTimer(500,0);
 8000750:	2100      	movs	r1, #0
 8000752:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000756:	f000 fd51 	bl	80011fc <setTimer>
		}

		//update value
		if(isButtonPressed(TIME_BUTTON))
 800075a:	2001      	movs	r0, #1
 800075c:	f7ff fd3a 	bl	80001d4 <isButtonPressed>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d011      	beq.n	800078a <fsm_mode_change+0x12a>
		{
			bufferForTrafficLight[1]=(bufferForTrafficLight[1]%99)+1;//1-99
 8000766:	4b3f      	ldr	r3, [pc, #252]	; (8000864 <fsm_mode_change+0x204>)
 8000768:	685a      	ldr	r2, [r3, #4]
 800076a:	4b3f      	ldr	r3, [pc, #252]	; (8000868 <fsm_mode_change+0x208>)
 800076c:	fb83 1302 	smull	r1, r3, r3, r2
 8000770:	4413      	add	r3, r2
 8000772:	1199      	asrs	r1, r3, #6
 8000774:	17d3      	asrs	r3, r2, #31
 8000776:	1ac9      	subs	r1, r1, r3
 8000778:	460b      	mov	r3, r1
 800077a:	005b      	lsls	r3, r3, #1
 800077c:	440b      	add	r3, r1
 800077e:	0159      	lsls	r1, r3, #5
 8000780:	440b      	add	r3, r1
 8000782:	1ad1      	subs	r1, r2, r3
 8000784:	1c4b      	adds	r3, r1, #1
 8000786:	4a37      	ldr	r2, [pc, #220]	; (8000864 <fsm_mode_change+0x204>)
 8000788:	6053      	str	r3, [r2, #4]
		}
			updateBufferYellow();
 800078a:	f7ff ff0b 	bl	80005a4 <updateBufferYellow>

		//change mode
		if(isButtonPressed(MODE_BUTTON))
 800078e:	2000      	movs	r0, #0
 8000790:	f7ff fd20 	bl	80001d4 <isButtonPressed>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d009      	beq.n	80007ae <fsm_mode_change+0x14e>
		{
			mode=GREEN_MODE;
 800079a:	4b31      	ldr	r3, [pc, #196]	; (8000860 <fsm_mode_change+0x200>)
 800079c:	220d      	movs	r2, #13
 800079e:	601a      	str	r2, [r3, #0]
			setTimer(500,0);//2Hz
 80007a0:	2100      	movs	r1, #0
 80007a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007a6:	f000 fd29 	bl	80011fc <setTimer>
			offAllTrafficLight();
 80007aa:	f000 f85f 	bl	800086c <offAllTrafficLight>
		}

		//return normal
		if(isButtonPressed(SET_VALUE_BUTTON))
 80007ae:	2002      	movs	r0, #2
 80007b0:	f7ff fd10 	bl	80001d4 <isButtonPressed>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d04c      	beq.n	8000854 <fsm_mode_change+0x1f4>
		{
			mode=NORMAL_MODE;
 80007ba:	4b29      	ldr	r3, [pc, #164]	; (8000860 <fsm_mode_change+0x200>)
 80007bc:	220a      	movs	r2, #10
 80007be:	601a      	str	r2, [r3, #0]
			offAllTrafficLight();
 80007c0:	f000 f854 	bl	800086c <offAllTrafficLight>
		}
		break;
 80007c4:	e046      	b.n	8000854 <fsm_mode_change+0x1f4>
	case GREEN_MODE:
		modeNum(4);
 80007c6:	2004      	movs	r0, #4
 80007c8:	f7ff ff38 	bl	800063c <modeNum>
		//blink 2Hz
		if(isTimerDone(1))
 80007cc:	2001      	movs	r0, #1
 80007ce:	f000 fd2f 	bl	8001230 <isTimerDone>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d006      	beq.n	80007e6 <fsm_mode_change+0x186>
		{
			blink_Green2Hz();
 80007d8:	f7ff feae 	bl	8000538 <blink_Green2Hz>
			setTimer(500,0);
 80007dc:	2100      	movs	r1, #0
 80007de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007e2:	f000 fd0b 	bl	80011fc <setTimer>
		}

		//update value
		if(isButtonPressed(TIME_BUTTON))
 80007e6:	2001      	movs	r0, #1
 80007e8:	f7ff fcf4 	bl	80001d4 <isButtonPressed>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d011      	beq.n	8000816 <fsm_mode_change+0x1b6>
		{
			bufferForTrafficLight[2]=(bufferForTrafficLight[2]%99)+1;//1-99
 80007f2:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <fsm_mode_change+0x204>)
 80007f4:	689a      	ldr	r2, [r3, #8]
 80007f6:	4b1c      	ldr	r3, [pc, #112]	; (8000868 <fsm_mode_change+0x208>)
 80007f8:	fb83 1302 	smull	r1, r3, r3, r2
 80007fc:	4413      	add	r3, r2
 80007fe:	1199      	asrs	r1, r3, #6
 8000800:	17d3      	asrs	r3, r2, #31
 8000802:	1ac9      	subs	r1, r1, r3
 8000804:	460b      	mov	r3, r1
 8000806:	005b      	lsls	r3, r3, #1
 8000808:	440b      	add	r3, r1
 800080a:	0159      	lsls	r1, r3, #5
 800080c:	440b      	add	r3, r1
 800080e:	1ad1      	subs	r1, r2, r3
 8000810:	1c4b      	adds	r3, r1, #1
 8000812:	4a14      	ldr	r2, [pc, #80]	; (8000864 <fsm_mode_change+0x204>)
 8000814:	6093      	str	r3, [r2, #8]
		}
			updateBufferGreen();
 8000816:	f7ff feeb 	bl	80005f0 <updateBufferGreen>

		//change mode
		if(isButtonPressed(MODE_BUTTON))
 800081a:	2000      	movs	r0, #0
 800081c:	f7ff fcda 	bl	80001d4 <isButtonPressed>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d004      	beq.n	8000830 <fsm_mode_change+0x1d0>
		{
			mode=NORMAL_MODE;
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <fsm_mode_change+0x200>)
 8000828:	220a      	movs	r2, #10
 800082a:	601a      	str	r2, [r3, #0]
			offAllTrafficLight();
 800082c:	f000 f81e 	bl	800086c <offAllTrafficLight>
		}

		//return normal
		if(isButtonPressed(SET_VALUE_BUTTON))
 8000830:	2002      	movs	r0, #2
 8000832:	f7ff fccf 	bl	80001d4 <isButtonPressed>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d00d      	beq.n	8000858 <fsm_mode_change+0x1f8>
		{
			mode=NORMAL_MODE;
 800083c:	4b08      	ldr	r3, [pc, #32]	; (8000860 <fsm_mode_change+0x200>)
 800083e:	220a      	movs	r2, #10
 8000840:	601a      	str	r2, [r3, #0]
			offAllTrafficLight();
 8000842:	f000 f813 	bl	800086c <offAllTrafficLight>
		}
		break;
 8000846:	e007      	b.n	8000858 <fsm_mode_change+0x1f8>
	default:
		break;
 8000848:	bf00      	nop
 800084a:	e006      	b.n	800085a <fsm_mode_change+0x1fa>
		break;
 800084c:	bf00      	nop
 800084e:	e004      	b.n	800085a <fsm_mode_change+0x1fa>
		break;
 8000850:	bf00      	nop
 8000852:	e002      	b.n	800085a <fsm_mode_change+0x1fa>
		break;
 8000854:	bf00      	nop
 8000856:	e000      	b.n	800085a <fsm_mode_change+0x1fa>
		break;
 8000858:	bf00      	nop
	}
}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	200000b8 	.word	0x200000b8
 8000864:	2000000c 	.word	0x2000000c
 8000868:	a57eb503 	.word	0xa57eb503

0800086c <offAllTrafficLight>:
int currentOtherRoadTiming=0;

int bufferTrafficLightCountDown;
//turn light off
void offAllTrafficLight()
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_VER_GPIO_Port, RED_VER_Pin, 0);
 8000870:	2200      	movs	r2, #0
 8000872:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000876:	4810      	ldr	r0, [pc, #64]	; (80008b8 <offAllTrafficLight+0x4c>)
 8000878:	f001 f84b 	bl	8001912 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_VER_GPIO_Port, YELLOW_VER_Pin, 0);
 800087c:	2200      	movs	r2, #0
 800087e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000882:	480d      	ldr	r0, [pc, #52]	; (80008b8 <offAllTrafficLight+0x4c>)
 8000884:	f001 f845 	bl	8001912 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_VER_GPIO_Port, GREEN_VER_Pin, 0);
 8000888:	2200      	movs	r2, #0
 800088a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800088e:	480a      	ldr	r0, [pc, #40]	; (80008b8 <offAllTrafficLight+0x4c>)
 8000890:	f001 f83f 	bl	8001912 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED_HOR_GPIO_Port, RED_HOR_Pin, 0);
 8000894:	2200      	movs	r2, #0
 8000896:	2120      	movs	r1, #32
 8000898:	4807      	ldr	r0, [pc, #28]	; (80008b8 <offAllTrafficLight+0x4c>)
 800089a:	f001 f83a 	bl	8001912 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_HOR_GPIO_Port, YELLOW_HOR_Pin, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	2140      	movs	r1, #64	; 0x40
 80008a2:	4805      	ldr	r0, [pc, #20]	; (80008b8 <offAllTrafficLight+0x4c>)
 80008a4:	f001 f835 	bl	8001912 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_HOR_GPIO_Port, GREEN_HOR_Pin, 0);
 80008a8:	2200      	movs	r2, #0
 80008aa:	2180      	movs	r1, #128	; 0x80
 80008ac:	4802      	ldr	r0, [pc, #8]	; (80008b8 <offAllTrafficLight+0x4c>)
 80008ae:	f001 f830 	bl	8001912 <HAL_GPIO_WritePin>
}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40010800 	.word	0x40010800

080008bc <offHORLight>:

void offHORLight()
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_HOR_GPIO_Port, RED_HOR_Pin, 0);
 80008c0:	2200      	movs	r2, #0
 80008c2:	2120      	movs	r1, #32
 80008c4:	4807      	ldr	r0, [pc, #28]	; (80008e4 <offHORLight+0x28>)
 80008c6:	f001 f824 	bl	8001912 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_HOR_GPIO_Port, YELLOW_HOR_Pin, 0);
 80008ca:	2200      	movs	r2, #0
 80008cc:	2140      	movs	r1, #64	; 0x40
 80008ce:	4805      	ldr	r0, [pc, #20]	; (80008e4 <offHORLight+0x28>)
 80008d0:	f001 f81f 	bl	8001912 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_HOR_GPIO_Port, GREEN_HOR_Pin, 0);
 80008d4:	2200      	movs	r2, #0
 80008d6:	2180      	movs	r1, #128	; 0x80
 80008d8:	4802      	ldr	r0, [pc, #8]	; (80008e4 <offHORLight+0x28>)
 80008da:	f001 f81a 	bl	8001912 <HAL_GPIO_WritePin>
}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40010800 	.word	0x40010800

080008e8 <offVERLight>:

void offVERLight()
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_VER_GPIO_Port, RED_VER_Pin, 0);
 80008ec:	2200      	movs	r2, #0
 80008ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008f2:	4808      	ldr	r0, [pc, #32]	; (8000914 <offVERLight+0x2c>)
 80008f4:	f001 f80d 	bl	8001912 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_VER_GPIO_Port, YELLOW_VER_Pin, 0);
 80008f8:	2200      	movs	r2, #0
 80008fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008fe:	4805      	ldr	r0, [pc, #20]	; (8000914 <offVERLight+0x2c>)
 8000900:	f001 f807 	bl	8001912 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_VER_GPIO_Port, GREEN_VER_Pin, 0);
 8000904:	2200      	movs	r2, #0
 8000906:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800090a:	4802      	ldr	r0, [pc, #8]	; (8000914 <offVERLight+0x2c>)
 800090c:	f001 f801 	bl	8001912 <HAL_GPIO_WritePin>
}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40010800 	.word	0x40010800

08000918 <updateBufferFor7SEGvertical>:

//count down buffer
void updateBufferFor7SEGvertical()
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
	currentMainRoadTiming--;
 800091c:	4b05      	ldr	r3, [pc, #20]	; (8000934 <updateBufferFor7SEGvertical+0x1c>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	3b01      	subs	r3, #1
 8000922:	4a04      	ldr	r2, [pc, #16]	; (8000934 <updateBufferFor7SEGvertical+0x1c>)
 8000924:	6013      	str	r3, [r2, #0]
	setTimer(1000, 2);
 8000926:	2102      	movs	r1, #2
 8000928:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800092c:	f000 fc66 	bl	80011fc <setTimer>
}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}
 8000934:	200000b0 	.word	0x200000b0

08000938 <updateBufferFor7SEGhorizontal>:
void updateBufferFor7SEGhorizontal()
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
	currentOtherRoadTiming--;
 800093c:	4b05      	ldr	r3, [pc, #20]	; (8000954 <updateBufferFor7SEGhorizontal+0x1c>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	3b01      	subs	r3, #1
 8000942:	4a04      	ldr	r2, [pc, #16]	; (8000954 <updateBufferFor7SEGhorizontal+0x1c>)
 8000944:	6013      	str	r3, [r2, #0]
	setTimer(1000, 3);
 8000946:	2103      	movs	r1, #3
 8000948:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800094c:	f000 fc56 	bl	80011fc <setTimer>
}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}
 8000954:	200000b4 	.word	0x200000b4

08000958 <fsm_traffic_light>:

//vertical is main road, we works on main road
void fsm_traffic_light()
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
	switch(mainRoadStatus)
 800095c:	4bab      	ldr	r3, [pc, #684]	; (8000c0c <fsm_traffic_light+0x2b4>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	3b01      	subs	r3, #1
 8000962:	2b03      	cmp	r3, #3
 8000964:	f200 80d4 	bhi.w	8000b10 <fsm_traffic_light+0x1b8>
 8000968:	a201      	add	r2, pc, #4	; (adr r2, 8000970 <fsm_traffic_light+0x18>)
 800096a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800096e:	bf00      	nop
 8000970:	08000981 	.word	0x08000981
 8000974:	080009ff 	.word	0x080009ff
 8000978:	08000a7b 	.word	0x08000a7b
 800097c:	08000af7 	.word	0x08000af7
	{
	case 1://red
		bufferFor7SEG[0]=currentMainRoadTiming/10;
 8000980:	4ba3      	ldr	r3, [pc, #652]	; (8000c10 <fsm_traffic_light+0x2b8>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4aa3      	ldr	r2, [pc, #652]	; (8000c14 <fsm_traffic_light+0x2bc>)
 8000986:	fb82 1203 	smull	r1, r2, r2, r3
 800098a:	1092      	asrs	r2, r2, #2
 800098c:	17db      	asrs	r3, r3, #31
 800098e:	1ad3      	subs	r3, r2, r3
 8000990:	4aa1      	ldr	r2, [pc, #644]	; (8000c18 <fsm_traffic_light+0x2c0>)
 8000992:	6013      	str	r3, [r2, #0]
		bufferFor7SEG[1]=currentMainRoadTiming%10;
 8000994:	4b9e      	ldr	r3, [pc, #632]	; (8000c10 <fsm_traffic_light+0x2b8>)
 8000996:	6819      	ldr	r1, [r3, #0]
 8000998:	4b9e      	ldr	r3, [pc, #632]	; (8000c14 <fsm_traffic_light+0x2bc>)
 800099a:	fb83 2301 	smull	r2, r3, r3, r1
 800099e:	109a      	asrs	r2, r3, #2
 80009a0:	17cb      	asrs	r3, r1, #31
 80009a2:	1ad2      	subs	r2, r2, r3
 80009a4:	4613      	mov	r3, r2
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	4413      	add	r3, r2
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	1aca      	subs	r2, r1, r3
 80009ae:	4b9a      	ldr	r3, [pc, #616]	; (8000c18 <fsm_traffic_light+0x2c0>)
 80009b0:	605a      	str	r2, [r3, #4]
		HAL_GPIO_WritePin(RED_VER_GPIO_Port, RED_VER_Pin, 1);
 80009b2:	2201      	movs	r2, #1
 80009b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009b8:	4898      	ldr	r0, [pc, #608]	; (8000c1c <fsm_traffic_light+0x2c4>)
 80009ba:	f000 ffaa 	bl	8001912 <HAL_GPIO_WritePin>
		if(isTimerDone(2))
 80009be:	2002      	movs	r0, #2
 80009c0:	f000 fc36 	bl	8001230 <isTimerDone>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <fsm_traffic_light+0x76>
		{
			updateBufferFor7SEGvertical();
 80009ca:	f7ff ffa5 	bl	8000918 <updateBufferFor7SEGvertical>
		}
		if(currentMainRoadTiming<=0)
 80009ce:	4b90      	ldr	r3, [pc, #576]	; (8000c10 <fsm_traffic_light+0x2b8>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	dc08      	bgt.n	80009e8 <fsm_traffic_light+0x90>
		{
			offVERLight();
 80009d6:	f7ff ff87 	bl	80008e8 <offVERLight>
			mainRoadStatus=3;
 80009da:	4b8c      	ldr	r3, [pc, #560]	; (8000c0c <fsm_traffic_light+0x2b4>)
 80009dc:	2203      	movs	r2, #3
 80009de:	601a      	str	r2, [r3, #0]
			currentMainRoadTiming=bufferForTrafficLight[2];
 80009e0:	4b8f      	ldr	r3, [pc, #572]	; (8000c20 <fsm_traffic_light+0x2c8>)
 80009e2:	689b      	ldr	r3, [r3, #8]
 80009e4:	4a8a      	ldr	r2, [pc, #552]	; (8000c10 <fsm_traffic_light+0x2b8>)
 80009e6:	6013      	str	r3, [r2, #0]
		}
		if(mode!=NORMAL_MODE)
 80009e8:	4b8e      	ldr	r3, [pc, #568]	; (8000c24 <fsm_traffic_light+0x2cc>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	2b0a      	cmp	r3, #10
 80009ee:	f000 80b4 	beq.w	8000b5a <fsm_traffic_light+0x202>
		{
			mainRoadStatus=4;
 80009f2:	4b86      	ldr	r3, [pc, #536]	; (8000c0c <fsm_traffic_light+0x2b4>)
 80009f4:	2204      	movs	r2, #4
 80009f6:	601a      	str	r2, [r3, #0]
			offAllTrafficLight();
 80009f8:	f7ff ff38 	bl	800086c <offAllTrafficLight>
		}

		break;
 80009fc:	e0ad      	b.n	8000b5a <fsm_traffic_light+0x202>
	case 2://yellow
		bufferFor7SEG[0]=currentMainRoadTiming/10;
 80009fe:	4b84      	ldr	r3, [pc, #528]	; (8000c10 <fsm_traffic_light+0x2b8>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4a84      	ldr	r2, [pc, #528]	; (8000c14 <fsm_traffic_light+0x2bc>)
 8000a04:	fb82 1203 	smull	r1, r2, r2, r3
 8000a08:	1092      	asrs	r2, r2, #2
 8000a0a:	17db      	asrs	r3, r3, #31
 8000a0c:	1ad3      	subs	r3, r2, r3
 8000a0e:	4a82      	ldr	r2, [pc, #520]	; (8000c18 <fsm_traffic_light+0x2c0>)
 8000a10:	6013      	str	r3, [r2, #0]
		bufferFor7SEG[1]=currentMainRoadTiming%10;
 8000a12:	4b7f      	ldr	r3, [pc, #508]	; (8000c10 <fsm_traffic_light+0x2b8>)
 8000a14:	6819      	ldr	r1, [r3, #0]
 8000a16:	4b7f      	ldr	r3, [pc, #508]	; (8000c14 <fsm_traffic_light+0x2bc>)
 8000a18:	fb83 2301 	smull	r2, r3, r3, r1
 8000a1c:	109a      	asrs	r2, r3, #2
 8000a1e:	17cb      	asrs	r3, r1, #31
 8000a20:	1ad2      	subs	r2, r2, r3
 8000a22:	4613      	mov	r3, r2
 8000a24:	009b      	lsls	r3, r3, #2
 8000a26:	4413      	add	r3, r2
 8000a28:	005b      	lsls	r3, r3, #1
 8000a2a:	1aca      	subs	r2, r1, r3
 8000a2c:	4b7a      	ldr	r3, [pc, #488]	; (8000c18 <fsm_traffic_light+0x2c0>)
 8000a2e:	605a      	str	r2, [r3, #4]
		HAL_GPIO_WritePin(YELLOW_VER_GPIO_Port, YELLOW_VER_Pin, 1);
 8000a30:	2201      	movs	r2, #1
 8000a32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a36:	4879      	ldr	r0, [pc, #484]	; (8000c1c <fsm_traffic_light+0x2c4>)
 8000a38:	f000 ff6b 	bl	8001912 <HAL_GPIO_WritePin>
		if(isTimerDone(2))
 8000a3c:	2002      	movs	r0, #2
 8000a3e:	f000 fbf7 	bl	8001230 <isTimerDone>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <fsm_traffic_light+0xf4>
		{
			updateBufferFor7SEGvertical();
 8000a48:	f7ff ff66 	bl	8000918 <updateBufferFor7SEGvertical>
		}
		if(currentMainRoadTiming<=0)
 8000a4c:	4b70      	ldr	r3, [pc, #448]	; (8000c10 <fsm_traffic_light+0x2b8>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	dc08      	bgt.n	8000a66 <fsm_traffic_light+0x10e>
		{
			offVERLight();
 8000a54:	f7ff ff48 	bl	80008e8 <offVERLight>
			mainRoadStatus=1;
 8000a58:	4b6c      	ldr	r3, [pc, #432]	; (8000c0c <fsm_traffic_light+0x2b4>)
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	601a      	str	r2, [r3, #0]
			currentMainRoadTiming=bufferForTrafficLight[0];
 8000a5e:	4b70      	ldr	r3, [pc, #448]	; (8000c20 <fsm_traffic_light+0x2c8>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a6b      	ldr	r2, [pc, #428]	; (8000c10 <fsm_traffic_light+0x2b8>)
 8000a64:	6013      	str	r3, [r2, #0]
		}
		if(mode!=NORMAL_MODE)
 8000a66:	4b6f      	ldr	r3, [pc, #444]	; (8000c24 <fsm_traffic_light+0x2cc>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	2b0a      	cmp	r3, #10
 8000a6c:	d077      	beq.n	8000b5e <fsm_traffic_light+0x206>
		{
			mainRoadStatus=4;
 8000a6e:	4b67      	ldr	r3, [pc, #412]	; (8000c0c <fsm_traffic_light+0x2b4>)
 8000a70:	2204      	movs	r2, #4
 8000a72:	601a      	str	r2, [r3, #0]
			offAllTrafficLight();
 8000a74:	f7ff fefa 	bl	800086c <offAllTrafficLight>
		}
		break;
 8000a78:	e071      	b.n	8000b5e <fsm_traffic_light+0x206>
	case 3://green
		bufferFor7SEG[0]=currentMainRoadTiming/10;
 8000a7a:	4b65      	ldr	r3, [pc, #404]	; (8000c10 <fsm_traffic_light+0x2b8>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a65      	ldr	r2, [pc, #404]	; (8000c14 <fsm_traffic_light+0x2bc>)
 8000a80:	fb82 1203 	smull	r1, r2, r2, r3
 8000a84:	1092      	asrs	r2, r2, #2
 8000a86:	17db      	asrs	r3, r3, #31
 8000a88:	1ad3      	subs	r3, r2, r3
 8000a8a:	4a63      	ldr	r2, [pc, #396]	; (8000c18 <fsm_traffic_light+0x2c0>)
 8000a8c:	6013      	str	r3, [r2, #0]
		bufferFor7SEG[1]=currentMainRoadTiming%10;
 8000a8e:	4b60      	ldr	r3, [pc, #384]	; (8000c10 <fsm_traffic_light+0x2b8>)
 8000a90:	6819      	ldr	r1, [r3, #0]
 8000a92:	4b60      	ldr	r3, [pc, #384]	; (8000c14 <fsm_traffic_light+0x2bc>)
 8000a94:	fb83 2301 	smull	r2, r3, r3, r1
 8000a98:	109a      	asrs	r2, r3, #2
 8000a9a:	17cb      	asrs	r3, r1, #31
 8000a9c:	1ad2      	subs	r2, r2, r3
 8000a9e:	4613      	mov	r3, r2
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	4413      	add	r3, r2
 8000aa4:	005b      	lsls	r3, r3, #1
 8000aa6:	1aca      	subs	r2, r1, r3
 8000aa8:	4b5b      	ldr	r3, [pc, #364]	; (8000c18 <fsm_traffic_light+0x2c0>)
 8000aaa:	605a      	str	r2, [r3, #4]
		HAL_GPIO_WritePin(GREEN_VER_GPIO_Port, GREEN_VER_Pin, 1);
 8000aac:	2201      	movs	r2, #1
 8000aae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ab2:	485a      	ldr	r0, [pc, #360]	; (8000c1c <fsm_traffic_light+0x2c4>)
 8000ab4:	f000 ff2d 	bl	8001912 <HAL_GPIO_WritePin>
		if(isTimerDone(2))
 8000ab8:	2002      	movs	r0, #2
 8000aba:	f000 fbb9 	bl	8001230 <isTimerDone>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <fsm_traffic_light+0x170>
		{
			updateBufferFor7SEGvertical();
 8000ac4:	f7ff ff28 	bl	8000918 <updateBufferFor7SEGvertical>
		}
		if(currentMainRoadTiming<=0)
 8000ac8:	4b51      	ldr	r3, [pc, #324]	; (8000c10 <fsm_traffic_light+0x2b8>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	dc08      	bgt.n	8000ae2 <fsm_traffic_light+0x18a>
		{
			offVERLight();
 8000ad0:	f7ff ff0a 	bl	80008e8 <offVERLight>
			mainRoadStatus=2;
 8000ad4:	4b4d      	ldr	r3, [pc, #308]	; (8000c0c <fsm_traffic_light+0x2b4>)
 8000ad6:	2202      	movs	r2, #2
 8000ad8:	601a      	str	r2, [r3, #0]
			currentMainRoadTiming=bufferForTrafficLight[1];
 8000ada:	4b51      	ldr	r3, [pc, #324]	; (8000c20 <fsm_traffic_light+0x2c8>)
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	4a4c      	ldr	r2, [pc, #304]	; (8000c10 <fsm_traffic_light+0x2b8>)
 8000ae0:	6013      	str	r3, [r2, #0]
		}
		if(mode!=NORMAL_MODE)
 8000ae2:	4b50      	ldr	r3, [pc, #320]	; (8000c24 <fsm_traffic_light+0x2cc>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	2b0a      	cmp	r3, #10
 8000ae8:	d03b      	beq.n	8000b62 <fsm_traffic_light+0x20a>
		{
			mainRoadStatus=4;
 8000aea:	4b48      	ldr	r3, [pc, #288]	; (8000c0c <fsm_traffic_light+0x2b4>)
 8000aec:	2204      	movs	r2, #4
 8000aee:	601a      	str	r2, [r3, #0]
			offAllTrafficLight();
 8000af0:	f7ff febc 	bl	800086c <offAllTrafficLight>
		}
		break;
 8000af4:	e035      	b.n	8000b62 <fsm_traffic_light+0x20a>
	case 4://waiting for normal
		setTimer(1000,2);//count down every 1s
 8000af6:	2102      	movs	r1, #2
 8000af8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000afc:	f000 fb7e 	bl	80011fc <setTimer>
		if(mode==NORMAL_MODE)
 8000b00:	4b48      	ldr	r3, [pc, #288]	; (8000c24 <fsm_traffic_light+0x2cc>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2b0a      	cmp	r3, #10
 8000b06:	d12e      	bne.n	8000b66 <fsm_traffic_light+0x20e>
		{
			mainRoadStatus=0;//to default
 8000b08:	4b40      	ldr	r3, [pc, #256]	; (8000c0c <fsm_traffic_light+0x2b4>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
		}
		break;
 8000b0e:	e02a      	b.n	8000b66 <fsm_traffic_light+0x20e>
	default:
		if(mode==NORMAL_MODE)
 8000b10:	4b44      	ldr	r3, [pc, #272]	; (8000c24 <fsm_traffic_light+0x2cc>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2b0a      	cmp	r3, #10
 8000b16:	d128      	bne.n	8000b6a <fsm_traffic_light+0x212>
		{
			currentMainRoadTiming=bufferForTrafficLight[0];
 8000b18:	4b41      	ldr	r3, [pc, #260]	; (8000c20 <fsm_traffic_light+0x2c8>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a3c      	ldr	r2, [pc, #240]	; (8000c10 <fsm_traffic_light+0x2b8>)
 8000b1e:	6013      	str	r3, [r2, #0]
			bufferFor7SEG[0]=currentMainRoadTiming/10;
 8000b20:	4b3b      	ldr	r3, [pc, #236]	; (8000c10 <fsm_traffic_light+0x2b8>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a3b      	ldr	r2, [pc, #236]	; (8000c14 <fsm_traffic_light+0x2bc>)
 8000b26:	fb82 1203 	smull	r1, r2, r2, r3
 8000b2a:	1092      	asrs	r2, r2, #2
 8000b2c:	17db      	asrs	r3, r3, #31
 8000b2e:	1ad3      	subs	r3, r2, r3
 8000b30:	4a39      	ldr	r2, [pc, #228]	; (8000c18 <fsm_traffic_light+0x2c0>)
 8000b32:	6013      	str	r3, [r2, #0]
			bufferFor7SEG[1]=currentMainRoadTiming%10;
 8000b34:	4b36      	ldr	r3, [pc, #216]	; (8000c10 <fsm_traffic_light+0x2b8>)
 8000b36:	6819      	ldr	r1, [r3, #0]
 8000b38:	4b36      	ldr	r3, [pc, #216]	; (8000c14 <fsm_traffic_light+0x2bc>)
 8000b3a:	fb83 2301 	smull	r2, r3, r3, r1
 8000b3e:	109a      	asrs	r2, r3, #2
 8000b40:	17cb      	asrs	r3, r1, #31
 8000b42:	1ad2      	subs	r2, r2, r3
 8000b44:	4613      	mov	r3, r2
 8000b46:	009b      	lsls	r3, r3, #2
 8000b48:	4413      	add	r3, r2
 8000b4a:	005b      	lsls	r3, r3, #1
 8000b4c:	1aca      	subs	r2, r1, r3
 8000b4e:	4b32      	ldr	r3, [pc, #200]	; (8000c18 <fsm_traffic_light+0x2c0>)
 8000b50:	605a      	str	r2, [r3, #4]
			mainRoadStatus=1;//red
 8000b52:	4b2e      	ldr	r3, [pc, #184]	; (8000c0c <fsm_traffic_light+0x2b4>)
 8000b54:	2201      	movs	r2, #1
 8000b56:	601a      	str	r2, [r3, #0]
		}
		break;
 8000b58:	e007      	b.n	8000b6a <fsm_traffic_light+0x212>
		break;
 8000b5a:	bf00      	nop
 8000b5c:	e006      	b.n	8000b6c <fsm_traffic_light+0x214>
		break;
 8000b5e:	bf00      	nop
 8000b60:	e004      	b.n	8000b6c <fsm_traffic_light+0x214>
		break;
 8000b62:	bf00      	nop
 8000b64:	e002      	b.n	8000b6c <fsm_traffic_light+0x214>
		break;
 8000b66:	bf00      	nop
 8000b68:	e000      	b.n	8000b6c <fsm_traffic_light+0x214>
		break;
 8000b6a:	bf00      	nop
	}

	//other road light
	switch(otherRoadStatus)
 8000b6c:	4b2e      	ldr	r3, [pc, #184]	; (8000c28 <fsm_traffic_light+0x2d0>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	3b01      	subs	r3, #1
 8000b72:	2b03      	cmp	r3, #3
 8000b74:	f200 80e3 	bhi.w	8000d3e <fsm_traffic_light+0x3e6>
 8000b78:	a201      	add	r2, pc, #4	; (adr r2, 8000b80 <fsm_traffic_light+0x228>)
 8000b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b7e:	bf00      	nop
 8000b80:	08000b91 	.word	0x08000b91
 8000b84:	08000c31 	.word	0x08000c31
 8000b88:	08000cab 	.word	0x08000cab
 8000b8c:	08000d25 	.word	0x08000d25
	{
	case 1://red
		bufferFor7SEG[2]=currentOtherRoadTiming/10;
 8000b90:	4b26      	ldr	r3, [pc, #152]	; (8000c2c <fsm_traffic_light+0x2d4>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a1f      	ldr	r2, [pc, #124]	; (8000c14 <fsm_traffic_light+0x2bc>)
 8000b96:	fb82 1203 	smull	r1, r2, r2, r3
 8000b9a:	1092      	asrs	r2, r2, #2
 8000b9c:	17db      	asrs	r3, r3, #31
 8000b9e:	1ad3      	subs	r3, r2, r3
 8000ba0:	4a1d      	ldr	r2, [pc, #116]	; (8000c18 <fsm_traffic_light+0x2c0>)
 8000ba2:	6093      	str	r3, [r2, #8]
		bufferFor7SEG[3]=currentOtherRoadTiming%10;
 8000ba4:	4b21      	ldr	r3, [pc, #132]	; (8000c2c <fsm_traffic_light+0x2d4>)
 8000ba6:	6819      	ldr	r1, [r3, #0]
 8000ba8:	4b1a      	ldr	r3, [pc, #104]	; (8000c14 <fsm_traffic_light+0x2bc>)
 8000baa:	fb83 2301 	smull	r2, r3, r3, r1
 8000bae:	109a      	asrs	r2, r3, #2
 8000bb0:	17cb      	asrs	r3, r1, #31
 8000bb2:	1ad2      	subs	r2, r2, r3
 8000bb4:	4613      	mov	r3, r2
 8000bb6:	009b      	lsls	r3, r3, #2
 8000bb8:	4413      	add	r3, r2
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	1aca      	subs	r2, r1, r3
 8000bbe:	4b16      	ldr	r3, [pc, #88]	; (8000c18 <fsm_traffic_light+0x2c0>)
 8000bc0:	60da      	str	r2, [r3, #12]
		HAL_GPIO_WritePin(RED_HOR_GPIO_Port, RED_HOR_Pin, 1);
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	2120      	movs	r1, #32
 8000bc6:	4815      	ldr	r0, [pc, #84]	; (8000c1c <fsm_traffic_light+0x2c4>)
 8000bc8:	f000 fea3 	bl	8001912 <HAL_GPIO_WritePin>
		if(isTimerDone(3))
 8000bcc:	2003      	movs	r0, #3
 8000bce:	f000 fb2f 	bl	8001230 <isTimerDone>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <fsm_traffic_light+0x284>
		{
			updateBufferFor7SEGhorizontal();
 8000bd8:	f7ff feae 	bl	8000938 <updateBufferFor7SEGhorizontal>
		}
		if(currentOtherRoadTiming<=0)
 8000bdc:	4b13      	ldr	r3, [pc, #76]	; (8000c2c <fsm_traffic_light+0x2d4>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	dc08      	bgt.n	8000bf6 <fsm_traffic_light+0x29e>
		{
			offHORLight();
 8000be4:	f7ff fe6a 	bl	80008bc <offHORLight>
			otherRoadStatus=3;
 8000be8:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <fsm_traffic_light+0x2d0>)
 8000bea:	2203      	movs	r2, #3
 8000bec:	601a      	str	r2, [r3, #0]
			currentOtherRoadTiming=bufferForTrafficLight[2];
 8000bee:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <fsm_traffic_light+0x2c8>)
 8000bf0:	689b      	ldr	r3, [r3, #8]
 8000bf2:	4a0e      	ldr	r2, [pc, #56]	; (8000c2c <fsm_traffic_light+0x2d4>)
 8000bf4:	6013      	str	r3, [r2, #0]
		}
		if(mode!=NORMAL_MODE)
 8000bf6:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <fsm_traffic_light+0x2cc>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	2b0a      	cmp	r3, #10
 8000bfc:	f000 80c4 	beq.w	8000d88 <fsm_traffic_light+0x430>
		{
			otherRoadStatus=4;
 8000c00:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <fsm_traffic_light+0x2d0>)
 8000c02:	2204      	movs	r2, #4
 8000c04:	601a      	str	r2, [r3, #0]
			offAllTrafficLight();
 8000c06:	f7ff fe31 	bl	800086c <offAllTrafficLight>
		}
		break;
 8000c0a:	e0bd      	b.n	8000d88 <fsm_traffic_light+0x430>
 8000c0c:	20000018 	.word	0x20000018
 8000c10:	200000b0 	.word	0x200000b0
 8000c14:	66666667 	.word	0x66666667
 8000c18:	200000a0 	.word	0x200000a0
 8000c1c:	40010800 	.word	0x40010800
 8000c20:	2000000c 	.word	0x2000000c
 8000c24:	200000b8 	.word	0x200000b8
 8000c28:	2000001c 	.word	0x2000001c
 8000c2c:	200000b4 	.word	0x200000b4
	case 2://yellow
		bufferFor7SEG[2]=currentOtherRoadTiming/10;
 8000c30:	4b5b      	ldr	r3, [pc, #364]	; (8000da0 <fsm_traffic_light+0x448>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a5b      	ldr	r2, [pc, #364]	; (8000da4 <fsm_traffic_light+0x44c>)
 8000c36:	fb82 1203 	smull	r1, r2, r2, r3
 8000c3a:	1092      	asrs	r2, r2, #2
 8000c3c:	17db      	asrs	r3, r3, #31
 8000c3e:	1ad3      	subs	r3, r2, r3
 8000c40:	4a59      	ldr	r2, [pc, #356]	; (8000da8 <fsm_traffic_light+0x450>)
 8000c42:	6093      	str	r3, [r2, #8]
		bufferFor7SEG[3]=currentOtherRoadTiming%10;
 8000c44:	4b56      	ldr	r3, [pc, #344]	; (8000da0 <fsm_traffic_light+0x448>)
 8000c46:	6819      	ldr	r1, [r3, #0]
 8000c48:	4b56      	ldr	r3, [pc, #344]	; (8000da4 <fsm_traffic_light+0x44c>)
 8000c4a:	fb83 2301 	smull	r2, r3, r3, r1
 8000c4e:	109a      	asrs	r2, r3, #2
 8000c50:	17cb      	asrs	r3, r1, #31
 8000c52:	1ad2      	subs	r2, r2, r3
 8000c54:	4613      	mov	r3, r2
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	4413      	add	r3, r2
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	1aca      	subs	r2, r1, r3
 8000c5e:	4b52      	ldr	r3, [pc, #328]	; (8000da8 <fsm_traffic_light+0x450>)
 8000c60:	60da      	str	r2, [r3, #12]
		HAL_GPIO_WritePin(YELLOW_HOR_GPIO_Port, YELLOW_HOR_Pin, 1);
 8000c62:	2201      	movs	r2, #1
 8000c64:	2140      	movs	r1, #64	; 0x40
 8000c66:	4851      	ldr	r0, [pc, #324]	; (8000dac <fsm_traffic_light+0x454>)
 8000c68:	f000 fe53 	bl	8001912 <HAL_GPIO_WritePin>
		if(isTimerDone(3))
 8000c6c:	2003      	movs	r0, #3
 8000c6e:	f000 fadf 	bl	8001230 <isTimerDone>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <fsm_traffic_light+0x324>
		{
			updateBufferFor7SEGhorizontal();
 8000c78:	f7ff fe5e 	bl	8000938 <updateBufferFor7SEGhorizontal>
		}
		if(currentOtherRoadTiming<=0)
 8000c7c:	4b48      	ldr	r3, [pc, #288]	; (8000da0 <fsm_traffic_light+0x448>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	dc08      	bgt.n	8000c96 <fsm_traffic_light+0x33e>
		{
			offHORLight();
 8000c84:	f7ff fe1a 	bl	80008bc <offHORLight>
			otherRoadStatus=1;
 8000c88:	4b49      	ldr	r3, [pc, #292]	; (8000db0 <fsm_traffic_light+0x458>)
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	601a      	str	r2, [r3, #0]
			currentOtherRoadTiming=bufferForTrafficLight[0];
 8000c8e:	4b49      	ldr	r3, [pc, #292]	; (8000db4 <fsm_traffic_light+0x45c>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a43      	ldr	r2, [pc, #268]	; (8000da0 <fsm_traffic_light+0x448>)
 8000c94:	6013      	str	r3, [r2, #0]
		}
		if(mode!=NORMAL_MODE)
 8000c96:	4b48      	ldr	r3, [pc, #288]	; (8000db8 <fsm_traffic_light+0x460>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	2b0a      	cmp	r3, #10
 8000c9c:	d076      	beq.n	8000d8c <fsm_traffic_light+0x434>
		{
			otherRoadStatus=4;
 8000c9e:	4b44      	ldr	r3, [pc, #272]	; (8000db0 <fsm_traffic_light+0x458>)
 8000ca0:	2204      	movs	r2, #4
 8000ca2:	601a      	str	r2, [r3, #0]
			offAllTrafficLight();
 8000ca4:	f7ff fde2 	bl	800086c <offAllTrafficLight>
		}
		break;
 8000ca8:	e070      	b.n	8000d8c <fsm_traffic_light+0x434>
	case 3://green
		bufferFor7SEG[2]=currentOtherRoadTiming/10;
 8000caa:	4b3d      	ldr	r3, [pc, #244]	; (8000da0 <fsm_traffic_light+0x448>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a3d      	ldr	r2, [pc, #244]	; (8000da4 <fsm_traffic_light+0x44c>)
 8000cb0:	fb82 1203 	smull	r1, r2, r2, r3
 8000cb4:	1092      	asrs	r2, r2, #2
 8000cb6:	17db      	asrs	r3, r3, #31
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	4a3b      	ldr	r2, [pc, #236]	; (8000da8 <fsm_traffic_light+0x450>)
 8000cbc:	6093      	str	r3, [r2, #8]
		bufferFor7SEG[3]=currentOtherRoadTiming%10;
 8000cbe:	4b38      	ldr	r3, [pc, #224]	; (8000da0 <fsm_traffic_light+0x448>)
 8000cc0:	6819      	ldr	r1, [r3, #0]
 8000cc2:	4b38      	ldr	r3, [pc, #224]	; (8000da4 <fsm_traffic_light+0x44c>)
 8000cc4:	fb83 2301 	smull	r2, r3, r3, r1
 8000cc8:	109a      	asrs	r2, r3, #2
 8000cca:	17cb      	asrs	r3, r1, #31
 8000ccc:	1ad2      	subs	r2, r2, r3
 8000cce:	4613      	mov	r3, r2
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	4413      	add	r3, r2
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	1aca      	subs	r2, r1, r3
 8000cd8:	4b33      	ldr	r3, [pc, #204]	; (8000da8 <fsm_traffic_light+0x450>)
 8000cda:	60da      	str	r2, [r3, #12]
		HAL_GPIO_WritePin(GREEN_HOR_GPIO_Port, GREEN_HOR_Pin, 1);
 8000cdc:	2201      	movs	r2, #1
 8000cde:	2180      	movs	r1, #128	; 0x80
 8000ce0:	4832      	ldr	r0, [pc, #200]	; (8000dac <fsm_traffic_light+0x454>)
 8000ce2:	f000 fe16 	bl	8001912 <HAL_GPIO_WritePin>
		if(isTimerDone(3))
 8000ce6:	2003      	movs	r0, #3
 8000ce8:	f000 faa2 	bl	8001230 <isTimerDone>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <fsm_traffic_light+0x39e>
		{
			updateBufferFor7SEGhorizontal();
 8000cf2:	f7ff fe21 	bl	8000938 <updateBufferFor7SEGhorizontal>
		}
		if(currentOtherRoadTiming<=0)
 8000cf6:	4b2a      	ldr	r3, [pc, #168]	; (8000da0 <fsm_traffic_light+0x448>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	dc08      	bgt.n	8000d10 <fsm_traffic_light+0x3b8>
		{
			offHORLight();
 8000cfe:	f7ff fddd 	bl	80008bc <offHORLight>
			otherRoadStatus=2;
 8000d02:	4b2b      	ldr	r3, [pc, #172]	; (8000db0 <fsm_traffic_light+0x458>)
 8000d04:	2202      	movs	r2, #2
 8000d06:	601a      	str	r2, [r3, #0]
			currentOtherRoadTiming=bufferForTrafficLight[1];
 8000d08:	4b2a      	ldr	r3, [pc, #168]	; (8000db4 <fsm_traffic_light+0x45c>)
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	4a24      	ldr	r2, [pc, #144]	; (8000da0 <fsm_traffic_light+0x448>)
 8000d0e:	6013      	str	r3, [r2, #0]
		}
		if(mode!=NORMAL_MODE)
 8000d10:	4b29      	ldr	r3, [pc, #164]	; (8000db8 <fsm_traffic_light+0x460>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2b0a      	cmp	r3, #10
 8000d16:	d03b      	beq.n	8000d90 <fsm_traffic_light+0x438>
		{
			otherRoadStatus=4;
 8000d18:	4b25      	ldr	r3, [pc, #148]	; (8000db0 <fsm_traffic_light+0x458>)
 8000d1a:	2204      	movs	r2, #4
 8000d1c:	601a      	str	r2, [r3, #0]
			offAllTrafficLight();
 8000d1e:	f7ff fda5 	bl	800086c <offAllTrafficLight>
		}
		break;
 8000d22:	e035      	b.n	8000d90 <fsm_traffic_light+0x438>
	case 4://waiting mode
		setTimer(1000,3);
 8000d24:	2103      	movs	r1, #3
 8000d26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d2a:	f000 fa67 	bl	80011fc <setTimer>
		if(mode==NORMAL_MODE)
 8000d2e:	4b22      	ldr	r3, [pc, #136]	; (8000db8 <fsm_traffic_light+0x460>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	2b0a      	cmp	r3, #10
 8000d34:	d12e      	bne.n	8000d94 <fsm_traffic_light+0x43c>
		{
			otherRoadStatus=0;//to default
 8000d36:	4b1e      	ldr	r3, [pc, #120]	; (8000db0 <fsm_traffic_light+0x458>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
		}
		break;
 8000d3c:	e02a      	b.n	8000d94 <fsm_traffic_light+0x43c>
	default:
		if(mode==NORMAL_MODE)
 8000d3e:	4b1e      	ldr	r3, [pc, #120]	; (8000db8 <fsm_traffic_light+0x460>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	2b0a      	cmp	r3, #10
 8000d44:	d128      	bne.n	8000d98 <fsm_traffic_light+0x440>
		{
			currentOtherRoadTiming=bufferForTrafficLight[2];
 8000d46:	4b1b      	ldr	r3, [pc, #108]	; (8000db4 <fsm_traffic_light+0x45c>)
 8000d48:	689b      	ldr	r3, [r3, #8]
 8000d4a:	4a15      	ldr	r2, [pc, #84]	; (8000da0 <fsm_traffic_light+0x448>)
 8000d4c:	6013      	str	r3, [r2, #0]
			bufferFor7SEG[2]=currentOtherRoadTiming/10;
 8000d4e:	4b14      	ldr	r3, [pc, #80]	; (8000da0 <fsm_traffic_light+0x448>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a14      	ldr	r2, [pc, #80]	; (8000da4 <fsm_traffic_light+0x44c>)
 8000d54:	fb82 1203 	smull	r1, r2, r2, r3
 8000d58:	1092      	asrs	r2, r2, #2
 8000d5a:	17db      	asrs	r3, r3, #31
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	4a12      	ldr	r2, [pc, #72]	; (8000da8 <fsm_traffic_light+0x450>)
 8000d60:	6093      	str	r3, [r2, #8]
			bufferFor7SEG[3]=currentOtherRoadTiming%10;
 8000d62:	4b0f      	ldr	r3, [pc, #60]	; (8000da0 <fsm_traffic_light+0x448>)
 8000d64:	6819      	ldr	r1, [r3, #0]
 8000d66:	4b0f      	ldr	r3, [pc, #60]	; (8000da4 <fsm_traffic_light+0x44c>)
 8000d68:	fb83 2301 	smull	r2, r3, r3, r1
 8000d6c:	109a      	asrs	r2, r3, #2
 8000d6e:	17cb      	asrs	r3, r1, #31
 8000d70:	1ad2      	subs	r2, r2, r3
 8000d72:	4613      	mov	r3, r2
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	4413      	add	r3, r2
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	1aca      	subs	r2, r1, r3
 8000d7c:	4b0a      	ldr	r3, [pc, #40]	; (8000da8 <fsm_traffic_light+0x450>)
 8000d7e:	60da      	str	r2, [r3, #12]
			otherRoadStatus=3;//green
 8000d80:	4b0b      	ldr	r3, [pc, #44]	; (8000db0 <fsm_traffic_light+0x458>)
 8000d82:	2203      	movs	r2, #3
 8000d84:	601a      	str	r2, [r3, #0]
		}
		break;
 8000d86:	e007      	b.n	8000d98 <fsm_traffic_light+0x440>
		break;
 8000d88:	bf00      	nop
 8000d8a:	e006      	b.n	8000d9a <fsm_traffic_light+0x442>
		break;
 8000d8c:	bf00      	nop
 8000d8e:	e004      	b.n	8000d9a <fsm_traffic_light+0x442>
		break;
 8000d90:	bf00      	nop
 8000d92:	e002      	b.n	8000d9a <fsm_traffic_light+0x442>
		break;
 8000d94:	bf00      	nop
 8000d96:	e000      	b.n	8000d9a <fsm_traffic_light+0x442>
		break;
 8000d98:	bf00      	nop
	}

}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	200000b4 	.word	0x200000b4
 8000da4:	66666667 	.word	0x66666667
 8000da8:	200000a0 	.word	0x200000a0
 8000dac:	40010800 	.word	0x40010800
 8000db0:	2000001c 	.word	0x2000001c
 8000db4:	2000000c 	.word	0x2000000c
 8000db8:	200000b8 	.word	0x200000b8

08000dbc <LED7_WriteByte>:
int LED7_HEX[] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90};

void LED7_WriteByte(int b);

void LED7_WriteByte(int b)//need upgrade
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]

	for (int i=0;i<=6;i++)
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	e023      	b.n	8000e12 <LED7_WriteByte+0x56>
	{
		if (((b>>i)&0x01)==1)
 8000dca:	687a      	ldr	r2, [r7, #4]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	fa42 f303 	asr.w	r3, r2, r3
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d00c      	beq.n	8000df4 <LED7_WriteByte+0x38>
		{
			HAL_GPIO_WritePin(led7SegPort[i], led7SegPin[i], GPIO_PIN_SET);
 8000dda:	4a12      	ldr	r2, [pc, #72]	; (8000e24 <LED7_WriteByte+0x68>)
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000de2:	4a11      	ldr	r2, [pc, #68]	; (8000e28 <LED7_WriteByte+0x6c>)
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dea:	2201      	movs	r2, #1
 8000dec:	4619      	mov	r1, r3
 8000dee:	f000 fd90 	bl	8001912 <HAL_GPIO_WritePin>
 8000df2:	e00b      	b.n	8000e0c <LED7_WriteByte+0x50>
		}
		else
		{
			HAL_GPIO_WritePin(led7SegPort[i], led7SegPin[i], GPIO_PIN_RESET);
 8000df4:	4a0b      	ldr	r2, [pc, #44]	; (8000e24 <LED7_WriteByte+0x68>)
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000dfc:	4a0a      	ldr	r2, [pc, #40]	; (8000e28 <LED7_WriteByte+0x6c>)
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e04:	2200      	movs	r2, #0
 8000e06:	4619      	mov	r1, r3
 8000e08:	f000 fd83 	bl	8001912 <HAL_GPIO_WritePin>
	for (int i=0;i<=6;i++)
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	3301      	adds	r3, #1
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	2b06      	cmp	r3, #6
 8000e16:	ddd8      	ble.n	8000dca <LED7_WriteByte+0xe>
		}
	}
}
 8000e18:	bf00      	nop
 8000e1a:	bf00      	nop
 8000e1c:	3710      	adds	r7, #16
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20000024 	.word	0x20000024
 8000e28:	20000040 	.word	0x20000040

08000e2c <display7SEG>:

void display7SEG(int num)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  LED7_WriteByte(LED7_HEX[num]);
 8000e34:	4a05      	ldr	r2, [pc, #20]	; (8000e4c <display7SEG+0x20>)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff ffbd 	bl	8000dbc <LED7_WriteByte>
}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000050 	.word	0x20000050

08000e50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e54:	f000 fa5c 	bl	8001310 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e58:	f000 f822 	bl	8000ea0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 8000e5c:	f000 f85c 	bl	8000f18 <MX_TIM2_Init>
  MX_GPIO_Init();
 8000e60:	f000 f8a6 	bl	8000fb0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000e64:	480c      	ldr	r0, [pc, #48]	; (8000e98 <main+0x48>)
 8000e66:	f001 f9bd 	bl	80021e4 <HAL_TIM_Base_Start_IT>
  startAllButton();
 8000e6a:	f7ff f96f 	bl	800014c <startAllButton>
  startAllTimer();
 8000e6e:	f000 f9a5 	bl	80011bc <startAllTimer>
  OffAllLed();
 8000e72:	f7ff fa85 	bl	8000380 <OffAllLed>
  offAllTrafficLight();
 8000e76:	f7ff fcf9 	bl	800086c <offAllTrafficLight>
  mode=NORMAL_MODE;
 8000e7a:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <main+0x4c>)
 8000e7c:	220a      	movs	r2, #10
 8000e7e:	601a      	str	r2, [r3, #0]
  setTimer(250,2);
 8000e80:	2102      	movs	r1, #2
 8000e82:	20fa      	movs	r0, #250	; 0xfa
 8000e84:	f000 f9ba 	bl	80011fc <setTimer>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  fsm_mode_change();
 8000e88:	f7ff fbea 	bl	8000660 <fsm_mode_change>
	  fsm_7seg_led();
 8000e8c:	f7ff fae6 	bl	800045c <fsm_7seg_led>
	  fsm_traffic_light();
 8000e90:	f7ff fd62 	bl	8000958 <fsm_traffic_light>
	  fsm_mode_change();
 8000e94:	e7f8      	b.n	8000e88 <main+0x38>
 8000e96:	bf00      	nop
 8000e98:	2000011c 	.word	0x2000011c
 8000e9c:	200000b8 	.word	0x200000b8

08000ea0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b090      	sub	sp, #64	; 0x40
 8000ea4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ea6:	f107 0318 	add.w	r3, r7, #24
 8000eaa:	2228      	movs	r2, #40	; 0x28
 8000eac:	2100      	movs	r1, #0
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f001 fd50 	bl	8002954 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eb4:	1d3b      	adds	r3, r7, #4
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	609a      	str	r2, [r3, #8]
 8000ebe:	60da      	str	r2, [r3, #12]
 8000ec0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eca:	2310      	movs	r3, #16
 8000ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ed2:	f107 0318 	add.w	r3, r7, #24
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f000 fd4c 	bl	8001974 <HAL_RCC_OscConfig>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000ee2:	f000 f8d8 	bl	8001096 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ee6:	230f      	movs	r3, #15
 8000ee8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000eea:	2300      	movs	r3, #0
 8000eec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000efa:	1d3b      	adds	r3, r7, #4
 8000efc:	2100      	movs	r1, #0
 8000efe:	4618      	mov	r0, r3
 8000f00:	f000 ffb8 	bl	8001e74 <HAL_RCC_ClockConfig>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000f0a:	f000 f8c4 	bl	8001096 <Error_Handler>
  }
}
 8000f0e:	bf00      	nop
 8000f10:	3740      	adds	r7, #64	; 0x40
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
	...

08000f18 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f1e:	f107 0308 	add.w	r3, r7, #8
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	605a      	str	r2, [r3, #4]
 8000f28:	609a      	str	r2, [r3, #8]
 8000f2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f2c:	463b      	mov	r3, r7
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f34:	4b1d      	ldr	r3, [pc, #116]	; (8000fac <MX_TIM2_Init+0x94>)
 8000f36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f3a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000f3c:	4b1b      	ldr	r3, [pc, #108]	; (8000fac <MX_TIM2_Init+0x94>)
 8000f3e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000f42:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f44:	4b19      	ldr	r3, [pc, #100]	; (8000fac <MX_TIM2_Init+0x94>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000f4a:	4b18      	ldr	r3, [pc, #96]	; (8000fac <MX_TIM2_Init+0x94>)
 8000f4c:	2209      	movs	r2, #9
 8000f4e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f50:	4b16      	ldr	r3, [pc, #88]	; (8000fac <MX_TIM2_Init+0x94>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f56:	4b15      	ldr	r3, [pc, #84]	; (8000fac <MX_TIM2_Init+0x94>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f5c:	4813      	ldr	r0, [pc, #76]	; (8000fac <MX_TIM2_Init+0x94>)
 8000f5e:	f001 f8f1 	bl	8002144 <HAL_TIM_Base_Init>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f68:	f000 f895 	bl	8001096 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f70:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f72:	f107 0308 	add.w	r3, r7, #8
 8000f76:	4619      	mov	r1, r3
 8000f78:	480c      	ldr	r0, [pc, #48]	; (8000fac <MX_TIM2_Init+0x94>)
 8000f7a:	f001 fa87 	bl	800248c <HAL_TIM_ConfigClockSource>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f84:	f000 f887 	bl	8001096 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f90:	463b      	mov	r3, r7
 8000f92:	4619      	mov	r1, r3
 8000f94:	4805      	ldr	r0, [pc, #20]	; (8000fac <MX_TIM2_Init+0x94>)
 8000f96:	f001 fc4f 	bl	8002838 <HAL_TIMEx_MasterConfigSynchronization>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000fa0:	f000 f879 	bl	8001096 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fa4:	bf00      	nop
 8000fa6:	3718      	adds	r7, #24
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	2000011c 	.word	0x2000011c

08000fb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb6:	f107 0308 	add.w	r3, r7, #8
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	605a      	str	r2, [r3, #4]
 8000fc0:	609a      	str	r2, [r3, #8]
 8000fc2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc4:	4b28      	ldr	r3, [pc, #160]	; (8001068 <MX_GPIO_Init+0xb8>)
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	4a27      	ldr	r2, [pc, #156]	; (8001068 <MX_GPIO_Init+0xb8>)
 8000fca:	f043 0304 	orr.w	r3, r3, #4
 8000fce:	6193      	str	r3, [r2, #24]
 8000fd0:	4b25      	ldr	r3, [pc, #148]	; (8001068 <MX_GPIO_Init+0xb8>)
 8000fd2:	699b      	ldr	r3, [r3, #24]
 8000fd4:	f003 0304 	and.w	r3, r3, #4
 8000fd8:	607b      	str	r3, [r7, #4]
 8000fda:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fdc:	4b22      	ldr	r3, [pc, #136]	; (8001068 <MX_GPIO_Init+0xb8>)
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	4a21      	ldr	r2, [pc, #132]	; (8001068 <MX_GPIO_Init+0xb8>)
 8000fe2:	f043 0308 	orr.w	r3, r3, #8
 8000fe6:	6193      	str	r3, [r2, #24]
 8000fe8:	4b1f      	ldr	r3, [pc, #124]	; (8001068 <MX_GPIO_Init+0xb8>)
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	f003 0308 	and.w	r3, r3, #8
 8000ff0:	603b      	str	r3, [r7, #0]
 8000ff2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_HOR_Pin|YELLOW_HOR_Pin|GREEN_HOR_Pin|RED_VER_Pin
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f647 71e0 	movw	r1, #32736	; 0x7fe0
 8000ffa:	481c      	ldr	r0, [pc, #112]	; (800106c <MX_GPIO_Init+0xbc>)
 8000ffc:	f000 fc89 	bl	8001912 <HAL_GPIO_WritePin>
                          |YELLOW_VER_Pin|GREEN_VER_Pin|MODE_LED_Pin|MODE_LED_2_Pin
                          |SET_VALUE_LED_Pin|SET_VALUE_LED_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PB0_Pin|PB1_Pin|PB2_Pin|PB3_Pin
 8001000:	2200      	movs	r2, #0
 8001002:	217f      	movs	r1, #127	; 0x7f
 8001004:	481a      	ldr	r0, [pc, #104]	; (8001070 <MX_GPIO_Init+0xc0>)
 8001006:	f000 fc84 	bl	8001912 <HAL_GPIO_WritePin>
                          |PB4_Pin|PB5_Pin|PB6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RED_HOR_Pin YELLOW_HOR_Pin GREEN_HOR_Pin RED_VER_Pin
                           YELLOW_VER_Pin GREEN_VER_Pin MODE_LED_Pin MODE_LED_2_Pin
                           SET_VALUE_LED_Pin SET_VALUE_LED_2_Pin */
  GPIO_InitStruct.Pin = RED_HOR_Pin|YELLOW_HOR_Pin|GREEN_HOR_Pin|RED_VER_Pin
 800100a:	f647 73e0 	movw	r3, #32736	; 0x7fe0
 800100e:	60bb      	str	r3, [r7, #8]
                          |YELLOW_VER_Pin|GREEN_VER_Pin|MODE_LED_Pin|MODE_LED_2_Pin
                          |SET_VALUE_LED_Pin|SET_VALUE_LED_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001010:	2301      	movs	r3, #1
 8001012:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001018:	2302      	movs	r3, #2
 800101a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101c:	f107 0308 	add.w	r3, r7, #8
 8001020:	4619      	mov	r1, r3
 8001022:	4812      	ldr	r0, [pc, #72]	; (800106c <MX_GPIO_Init+0xbc>)
 8001024:	f000 fae4 	bl	80015f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0_Pin PB1_Pin PB2_Pin PB3_Pin
                           PB4_Pin PB5_Pin PB6_Pin */
  GPIO_InitStruct.Pin = PB0_Pin|PB1_Pin|PB2_Pin|PB3_Pin
 8001028:	237f      	movs	r3, #127	; 0x7f
 800102a:	60bb      	str	r3, [r7, #8]
                          |PB4_Pin|PB5_Pin|PB6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102c:	2301      	movs	r3, #1
 800102e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001034:	2302      	movs	r3, #2
 8001036:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001038:	f107 0308 	add.w	r3, r7, #8
 800103c:	4619      	mov	r1, r3
 800103e:	480c      	ldr	r0, [pc, #48]	; (8001070 <MX_GPIO_Init+0xc0>)
 8001040:	f000 fad6 	bl	80015f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MODE_Pin TIME_Pin SET_VALUE_Pin */
  GPIO_InitStruct.Pin = MODE_Pin|TIME_Pin|SET_VALUE_Pin;
 8001044:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001048:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800104a:	2300      	movs	r3, #0
 800104c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800104e:	2301      	movs	r3, #1
 8001050:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001052:	f107 0308 	add.w	r3, r7, #8
 8001056:	4619      	mov	r1, r3
 8001058:	4805      	ldr	r0, [pc, #20]	; (8001070 <MX_GPIO_Init+0xc0>)
 800105a:	f000 fac9 	bl	80015f0 <HAL_GPIO_Init>

}
 800105e:	bf00      	nop
 8001060:	3718      	adds	r7, #24
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40021000 	.word	0x40021000
 800106c:	40010800 	.word	0x40010800
 8001070:	40010c00 	.word	0x40010c00

08001074 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM2 )
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001084:	d103      	bne.n	800108e <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
	timerRun();
 8001086:	f000 f8ed 	bl	8001264 <timerRun>
	getKeyInput();
 800108a:	f7ff f8dd 	bl	8000248 <getKeyInput>
	}
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001096:	b480      	push	{r7}
 8001098:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800109a:	b672      	cpsid	i
}
 800109c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800109e:	e7fe      	b.n	800109e <Error_Handler+0x8>

080010a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010a6:	4b15      	ldr	r3, [pc, #84]	; (80010fc <HAL_MspInit+0x5c>)
 80010a8:	699b      	ldr	r3, [r3, #24]
 80010aa:	4a14      	ldr	r2, [pc, #80]	; (80010fc <HAL_MspInit+0x5c>)
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	6193      	str	r3, [r2, #24]
 80010b2:	4b12      	ldr	r3, [pc, #72]	; (80010fc <HAL_MspInit+0x5c>)
 80010b4:	699b      	ldr	r3, [r3, #24]
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	60bb      	str	r3, [r7, #8]
 80010bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010be:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <HAL_MspInit+0x5c>)
 80010c0:	69db      	ldr	r3, [r3, #28]
 80010c2:	4a0e      	ldr	r2, [pc, #56]	; (80010fc <HAL_MspInit+0x5c>)
 80010c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010c8:	61d3      	str	r3, [r2, #28]
 80010ca:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <HAL_MspInit+0x5c>)
 80010cc:	69db      	ldr	r3, [r3, #28]
 80010ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80010d6:	4b0a      	ldr	r3, [pc, #40]	; (8001100 <HAL_MspInit+0x60>)
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	4a04      	ldr	r2, [pc, #16]	; (8001100 <HAL_MspInit+0x60>)
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010f2:	bf00      	nop
 80010f4:	3714      	adds	r7, #20
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bc80      	pop	{r7}
 80010fa:	4770      	bx	lr
 80010fc:	40021000 	.word	0x40021000
 8001100:	40010000 	.word	0x40010000

08001104 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001114:	d113      	bne.n	800113e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001116:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <HAL_TIM_Base_MspInit+0x44>)
 8001118:	69db      	ldr	r3, [r3, #28]
 800111a:	4a0b      	ldr	r2, [pc, #44]	; (8001148 <HAL_TIM_Base_MspInit+0x44>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	61d3      	str	r3, [r2, #28]
 8001122:	4b09      	ldr	r3, [pc, #36]	; (8001148 <HAL_TIM_Base_MspInit+0x44>)
 8001124:	69db      	ldr	r3, [r3, #28]
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800112e:	2200      	movs	r2, #0
 8001130:	2100      	movs	r1, #0
 8001132:	201c      	movs	r0, #28
 8001134:	f000 fa25 	bl	8001582 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001138:	201c      	movs	r0, #28
 800113a:	f000 fa3e 	bl	80015ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800113e:	bf00      	nop
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40021000 	.word	0x40021000

0800114c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001150:	e7fe      	b.n	8001150 <NMI_Handler+0x4>

08001152 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001152:	b480      	push	{r7}
 8001154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001156:	e7fe      	b.n	8001156 <HardFault_Handler+0x4>

08001158 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800115c:	e7fe      	b.n	800115c <MemManage_Handler+0x4>

0800115e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001162:	e7fe      	b.n	8001162 <BusFault_Handler+0x4>

08001164 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001168:	e7fe      	b.n	8001168 <UsageFault_Handler+0x4>

0800116a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800116e:	bf00      	nop
 8001170:	46bd      	mov	sp, r7
 8001172:	bc80      	pop	{r7}
 8001174:	4770      	bx	lr

08001176 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	46bd      	mov	sp, r7
 800117e:	bc80      	pop	{r7}
 8001180:	4770      	bx	lr

08001182 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	46bd      	mov	sp, r7
 800118a:	bc80      	pop	{r7}
 800118c:	4770      	bx	lr

0800118e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001192:	f000 f903 	bl	800139c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
	...

0800119c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011a0:	4802      	ldr	r0, [pc, #8]	; (80011ac <TIM2_IRQHandler+0x10>)
 80011a2:	f001 f86b 	bl	800227c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	2000011c 	.word	0x2000011c

080011b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc80      	pop	{r7}
 80011ba:	4770      	bx	lr

080011bc <startAllTimer>:
//int flag2=0;
//int flag3=0;
//int flag4=0;

void startAllTimer()
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
	for (int i=0;i<NUM_OF_TIMER;i++)
 80011c2:	2300      	movs	r3, #0
 80011c4:	607b      	str	r3, [r7, #4]
 80011c6:	e00c      	b.n	80011e2 <startAllTimer+0x26>
	{
		count[i]=0;
 80011c8:	4a0a      	ldr	r2, [pc, #40]	; (80011f4 <startAllTimer+0x38>)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2100      	movs	r1, #0
 80011ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		flag[i]=0;
 80011d2:	4a09      	ldr	r2, [pc, #36]	; (80011f8 <startAllTimer+0x3c>)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2100      	movs	r1, #0
 80011d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i=0;i<NUM_OF_TIMER;i++)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3301      	adds	r3, #1
 80011e0:	607b      	str	r3, [r7, #4]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2b03      	cmp	r3, #3
 80011e6:	ddef      	ble.n	80011c8 <startAllTimer+0xc>
	}
}
 80011e8:	bf00      	nop
 80011ea:	bf00      	nop
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr
 80011f4:	20000174 	.word	0x20000174
 80011f8:	20000164 	.word	0x20000164

080011fc <setTimer>:

void setTimer(int duration,int num_of_timer)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
	count[num_of_timer]=duration/TICK;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a07      	ldr	r2, [pc, #28]	; (8001228 <setTimer+0x2c>)
 800120a:	fb82 1203 	smull	r1, r2, r2, r3
 800120e:	1092      	asrs	r2, r2, #2
 8001210:	17db      	asrs	r3, r3, #31
 8001212:	1ad2      	subs	r2, r2, r3
 8001214:	4905      	ldr	r1, [pc, #20]	; (800122c <setTimer+0x30>)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	bc80      	pop	{r7}
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	66666667 	.word	0x66666667
 800122c:	20000174 	.word	0x20000174

08001230 <isTimerDone>:
//{
//	count4 = duration/TICK;
//}

int isTimerDone(int num_of_timer)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
	if(flag[num_of_timer]==1)
 8001238:	4a09      	ldr	r2, [pc, #36]	; (8001260 <isTimerDone+0x30>)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001240:	2b01      	cmp	r3, #1
 8001242:	d106      	bne.n	8001252 <isTimerDone+0x22>
	{
		flag[num_of_timer]=0;
 8001244:	4a06      	ldr	r2, [pc, #24]	; (8001260 <isTimerDone+0x30>)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2100      	movs	r1, #0
 800124a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800124e:	2301      	movs	r3, #1
 8001250:	e000      	b.n	8001254 <isTimerDone+0x24>
	}
		return 0;
 8001252:	2300      	movs	r3, #0
}
 8001254:	4618      	mov	r0, r3
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	bc80      	pop	{r7}
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	20000164 	.word	0x20000164

08001264 <timerRun>:
//	}
//		return 0;
//}

void timerRun()
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
	for(int timer=0;timer<NUM_OF_TIMER;timer++)
 800126a:	2300      	movs	r3, #0
 800126c:	607b      	str	r3, [r7, #4]
 800126e:	e01c      	b.n	80012aa <timerRun+0x46>
	{
		if(count[timer]>0)
 8001270:	4a12      	ldr	r2, [pc, #72]	; (80012bc <timerRun+0x58>)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001278:	2b00      	cmp	r3, #0
 800127a:	dd08      	ble.n	800128e <timerRun+0x2a>
		{
			count[timer]--;
 800127c:	4a0f      	ldr	r2, [pc, #60]	; (80012bc <timerRun+0x58>)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001284:	1e5a      	subs	r2, r3, #1
 8001286:	490d      	ldr	r1, [pc, #52]	; (80012bc <timerRun+0x58>)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
		if(count[timer]<=0)
 800128e:	4a0b      	ldr	r2, [pc, #44]	; (80012bc <timerRun+0x58>)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001296:	2b00      	cmp	r3, #0
 8001298:	dc04      	bgt.n	80012a4 <timerRun+0x40>
		{
			flag[timer]=1;
 800129a:	4a09      	ldr	r2, [pc, #36]	; (80012c0 <timerRun+0x5c>)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2101      	movs	r1, #1
 80012a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int timer=0;timer<NUM_OF_TIMER;timer++)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	3301      	adds	r3, #1
 80012a8:	607b      	str	r3, [r7, #4]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2b03      	cmp	r3, #3
 80012ae:	dddf      	ble.n	8001270 <timerRun+0xc>
//	}
//	if (count4<=0)
//	{
//		flag4=1;
//	}
}
 80012b0:	bf00      	nop
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr
 80012bc:	20000174 	.word	0x20000174
 80012c0:	20000164 	.word	0x20000164

080012c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012c4:	480c      	ldr	r0, [pc, #48]	; (80012f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012c6:	490d      	ldr	r1, [pc, #52]	; (80012fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012c8:	4a0d      	ldr	r2, [pc, #52]	; (8001300 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012cc:	e002      	b.n	80012d4 <LoopCopyDataInit>

080012ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012d2:	3304      	adds	r3, #4

080012d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012d8:	d3f9      	bcc.n	80012ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012da:	4a0a      	ldr	r2, [pc, #40]	; (8001304 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012dc:	4c0a      	ldr	r4, [pc, #40]	; (8001308 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012e0:	e001      	b.n	80012e6 <LoopFillZerobss>

080012e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012e4:	3204      	adds	r2, #4

080012e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012e8:	d3fb      	bcc.n	80012e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012ea:	f7ff ff61 	bl	80011b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012ee:	f001 fb0d 	bl	800290c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012f2:	f7ff fdad 	bl	8000e50 <main>
  bx lr
 80012f6:	4770      	bx	lr
  ldr r0, =_sdata
 80012f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012fc:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001300:	080029ac 	.word	0x080029ac
  ldr r2, =_sbss
 8001304:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001308:	20000188 	.word	0x20000188

0800130c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800130c:	e7fe      	b.n	800130c <ADC1_2_IRQHandler>
	...

08001310 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001314:	4b08      	ldr	r3, [pc, #32]	; (8001338 <HAL_Init+0x28>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a07      	ldr	r2, [pc, #28]	; (8001338 <HAL_Init+0x28>)
 800131a:	f043 0310 	orr.w	r3, r3, #16
 800131e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001320:	2003      	movs	r0, #3
 8001322:	f000 f923 	bl	800156c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001326:	200f      	movs	r0, #15
 8001328:	f000 f808 	bl	800133c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800132c:	f7ff feb8 	bl	80010a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40022000 	.word	0x40022000

0800133c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001344:	4b12      	ldr	r3, [pc, #72]	; (8001390 <HAL_InitTick+0x54>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	4b12      	ldr	r3, [pc, #72]	; (8001394 <HAL_InitTick+0x58>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	4619      	mov	r1, r3
 800134e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001352:	fbb3 f3f1 	udiv	r3, r3, r1
 8001356:	fbb2 f3f3 	udiv	r3, r2, r3
 800135a:	4618      	mov	r0, r3
 800135c:	f000 f93b 	bl	80015d6 <HAL_SYSTICK_Config>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e00e      	b.n	8001388 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2b0f      	cmp	r3, #15
 800136e:	d80a      	bhi.n	8001386 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001370:	2200      	movs	r2, #0
 8001372:	6879      	ldr	r1, [r7, #4]
 8001374:	f04f 30ff 	mov.w	r0, #4294967295
 8001378:	f000 f903 	bl	8001582 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800137c:	4a06      	ldr	r2, [pc, #24]	; (8001398 <HAL_InitTick+0x5c>)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001382:	2300      	movs	r3, #0
 8001384:	e000      	b.n	8001388 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
}
 8001388:	4618      	mov	r0, r3
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	20000078 	.word	0x20000078
 8001394:	20000080 	.word	0x20000080
 8001398:	2000007c 	.word	0x2000007c

0800139c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013a0:	4b05      	ldr	r3, [pc, #20]	; (80013b8 <HAL_IncTick+0x1c>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	461a      	mov	r2, r3
 80013a6:	4b05      	ldr	r3, [pc, #20]	; (80013bc <HAL_IncTick+0x20>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4413      	add	r3, r2
 80013ac:	4a03      	ldr	r2, [pc, #12]	; (80013bc <HAL_IncTick+0x20>)
 80013ae:	6013      	str	r3, [r2, #0]
}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bc80      	pop	{r7}
 80013b6:	4770      	bx	lr
 80013b8:	20000080 	.word	0x20000080
 80013bc:	20000184 	.word	0x20000184

080013c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  return uwTick;
 80013c4:	4b02      	ldr	r3, [pc, #8]	; (80013d0 <HAL_GetTick+0x10>)
 80013c6:	681b      	ldr	r3, [r3, #0]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bc80      	pop	{r7}
 80013ce:	4770      	bx	lr
 80013d0:	20000184 	.word	0x20000184

080013d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013e4:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <__NVIC_SetPriorityGrouping+0x44>)
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ea:	68ba      	ldr	r2, [r7, #8]
 80013ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013f0:	4013      	ands	r3, r2
 80013f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001400:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001404:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001406:	4a04      	ldr	r2, [pc, #16]	; (8001418 <__NVIC_SetPriorityGrouping+0x44>)
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	60d3      	str	r3, [r2, #12]
}
 800140c:	bf00      	nop
 800140e:	3714      	adds	r7, #20
 8001410:	46bd      	mov	sp, r7
 8001412:	bc80      	pop	{r7}
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	e000ed00 	.word	0xe000ed00

0800141c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001420:	4b04      	ldr	r3, [pc, #16]	; (8001434 <__NVIC_GetPriorityGrouping+0x18>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	0a1b      	lsrs	r3, r3, #8
 8001426:	f003 0307 	and.w	r3, r3, #7
}
 800142a:	4618      	mov	r0, r3
 800142c:	46bd      	mov	sp, r7
 800142e:	bc80      	pop	{r7}
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	e000ed00 	.word	0xe000ed00

08001438 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001446:	2b00      	cmp	r3, #0
 8001448:	db0b      	blt.n	8001462 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800144a:	79fb      	ldrb	r3, [r7, #7]
 800144c:	f003 021f 	and.w	r2, r3, #31
 8001450:	4906      	ldr	r1, [pc, #24]	; (800146c <__NVIC_EnableIRQ+0x34>)
 8001452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001456:	095b      	lsrs	r3, r3, #5
 8001458:	2001      	movs	r0, #1
 800145a:	fa00 f202 	lsl.w	r2, r0, r2
 800145e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr
 800146c:	e000e100 	.word	0xe000e100

08001470 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	6039      	str	r1, [r7, #0]
 800147a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800147c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001480:	2b00      	cmp	r3, #0
 8001482:	db0a      	blt.n	800149a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	b2da      	uxtb	r2, r3
 8001488:	490c      	ldr	r1, [pc, #48]	; (80014bc <__NVIC_SetPriority+0x4c>)
 800148a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148e:	0112      	lsls	r2, r2, #4
 8001490:	b2d2      	uxtb	r2, r2
 8001492:	440b      	add	r3, r1
 8001494:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001498:	e00a      	b.n	80014b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	b2da      	uxtb	r2, r3
 800149e:	4908      	ldr	r1, [pc, #32]	; (80014c0 <__NVIC_SetPriority+0x50>)
 80014a0:	79fb      	ldrb	r3, [r7, #7]
 80014a2:	f003 030f 	and.w	r3, r3, #15
 80014a6:	3b04      	subs	r3, #4
 80014a8:	0112      	lsls	r2, r2, #4
 80014aa:	b2d2      	uxtb	r2, r2
 80014ac:	440b      	add	r3, r1
 80014ae:	761a      	strb	r2, [r3, #24]
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc80      	pop	{r7}
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	e000e100 	.word	0xe000e100
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b089      	sub	sp, #36	; 0x24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	f1c3 0307 	rsb	r3, r3, #7
 80014de:	2b04      	cmp	r3, #4
 80014e0:	bf28      	it	cs
 80014e2:	2304      	movcs	r3, #4
 80014e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	3304      	adds	r3, #4
 80014ea:	2b06      	cmp	r3, #6
 80014ec:	d902      	bls.n	80014f4 <NVIC_EncodePriority+0x30>
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	3b03      	subs	r3, #3
 80014f2:	e000      	b.n	80014f6 <NVIC_EncodePriority+0x32>
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f8:	f04f 32ff 	mov.w	r2, #4294967295
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	43da      	mvns	r2, r3
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	401a      	ands	r2, r3
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800150c:	f04f 31ff 	mov.w	r1, #4294967295
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	fa01 f303 	lsl.w	r3, r1, r3
 8001516:	43d9      	mvns	r1, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800151c:	4313      	orrs	r3, r2
         );
}
 800151e:	4618      	mov	r0, r3
 8001520:	3724      	adds	r7, #36	; 0x24
 8001522:	46bd      	mov	sp, r7
 8001524:	bc80      	pop	{r7}
 8001526:	4770      	bx	lr

08001528 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	3b01      	subs	r3, #1
 8001534:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001538:	d301      	bcc.n	800153e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800153a:	2301      	movs	r3, #1
 800153c:	e00f      	b.n	800155e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800153e:	4a0a      	ldr	r2, [pc, #40]	; (8001568 <SysTick_Config+0x40>)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	3b01      	subs	r3, #1
 8001544:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001546:	210f      	movs	r1, #15
 8001548:	f04f 30ff 	mov.w	r0, #4294967295
 800154c:	f7ff ff90 	bl	8001470 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001550:	4b05      	ldr	r3, [pc, #20]	; (8001568 <SysTick_Config+0x40>)
 8001552:	2200      	movs	r2, #0
 8001554:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001556:	4b04      	ldr	r3, [pc, #16]	; (8001568 <SysTick_Config+0x40>)
 8001558:	2207      	movs	r2, #7
 800155a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	e000e010 	.word	0xe000e010

0800156c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f7ff ff2d 	bl	80013d4 <__NVIC_SetPriorityGrouping>
}
 800157a:	bf00      	nop
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001582:	b580      	push	{r7, lr}
 8001584:	b086      	sub	sp, #24
 8001586:	af00      	add	r7, sp, #0
 8001588:	4603      	mov	r3, r0
 800158a:	60b9      	str	r1, [r7, #8]
 800158c:	607a      	str	r2, [r7, #4]
 800158e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001594:	f7ff ff42 	bl	800141c <__NVIC_GetPriorityGrouping>
 8001598:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	68b9      	ldr	r1, [r7, #8]
 800159e:	6978      	ldr	r0, [r7, #20]
 80015a0:	f7ff ff90 	bl	80014c4 <NVIC_EncodePriority>
 80015a4:	4602      	mov	r2, r0
 80015a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015aa:	4611      	mov	r1, r2
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff ff5f 	bl	8001470 <__NVIC_SetPriority>
}
 80015b2:	bf00      	nop
 80015b4:	3718      	adds	r7, #24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b082      	sub	sp, #8
 80015be:	af00      	add	r7, sp, #0
 80015c0:	4603      	mov	r3, r0
 80015c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff ff35 	bl	8001438 <__NVIC_EnableIRQ>
}
 80015ce:	bf00      	nop
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b082      	sub	sp, #8
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7ff ffa2 	bl	8001528 <SysTick_Config>
 80015e4:	4603      	mov	r3, r0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
	...

080015f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b08b      	sub	sp, #44	; 0x2c
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015fa:	2300      	movs	r3, #0
 80015fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015fe:	2300      	movs	r3, #0
 8001600:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001602:	e148      	b.n	8001896 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001604:	2201      	movs	r2, #1
 8001606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	69fa      	ldr	r2, [r7, #28]
 8001614:	4013      	ands	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	429a      	cmp	r2, r3
 800161e:	f040 8137 	bne.w	8001890 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	4aa3      	ldr	r2, [pc, #652]	; (80018b4 <HAL_GPIO_Init+0x2c4>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d05e      	beq.n	80016ea <HAL_GPIO_Init+0xfa>
 800162c:	4aa1      	ldr	r2, [pc, #644]	; (80018b4 <HAL_GPIO_Init+0x2c4>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d875      	bhi.n	800171e <HAL_GPIO_Init+0x12e>
 8001632:	4aa1      	ldr	r2, [pc, #644]	; (80018b8 <HAL_GPIO_Init+0x2c8>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d058      	beq.n	80016ea <HAL_GPIO_Init+0xfa>
 8001638:	4a9f      	ldr	r2, [pc, #636]	; (80018b8 <HAL_GPIO_Init+0x2c8>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d86f      	bhi.n	800171e <HAL_GPIO_Init+0x12e>
 800163e:	4a9f      	ldr	r2, [pc, #636]	; (80018bc <HAL_GPIO_Init+0x2cc>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d052      	beq.n	80016ea <HAL_GPIO_Init+0xfa>
 8001644:	4a9d      	ldr	r2, [pc, #628]	; (80018bc <HAL_GPIO_Init+0x2cc>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d869      	bhi.n	800171e <HAL_GPIO_Init+0x12e>
 800164a:	4a9d      	ldr	r2, [pc, #628]	; (80018c0 <HAL_GPIO_Init+0x2d0>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d04c      	beq.n	80016ea <HAL_GPIO_Init+0xfa>
 8001650:	4a9b      	ldr	r2, [pc, #620]	; (80018c0 <HAL_GPIO_Init+0x2d0>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d863      	bhi.n	800171e <HAL_GPIO_Init+0x12e>
 8001656:	4a9b      	ldr	r2, [pc, #620]	; (80018c4 <HAL_GPIO_Init+0x2d4>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d046      	beq.n	80016ea <HAL_GPIO_Init+0xfa>
 800165c:	4a99      	ldr	r2, [pc, #612]	; (80018c4 <HAL_GPIO_Init+0x2d4>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d85d      	bhi.n	800171e <HAL_GPIO_Init+0x12e>
 8001662:	2b12      	cmp	r3, #18
 8001664:	d82a      	bhi.n	80016bc <HAL_GPIO_Init+0xcc>
 8001666:	2b12      	cmp	r3, #18
 8001668:	d859      	bhi.n	800171e <HAL_GPIO_Init+0x12e>
 800166a:	a201      	add	r2, pc, #4	; (adr r2, 8001670 <HAL_GPIO_Init+0x80>)
 800166c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001670:	080016eb 	.word	0x080016eb
 8001674:	080016c5 	.word	0x080016c5
 8001678:	080016d7 	.word	0x080016d7
 800167c:	08001719 	.word	0x08001719
 8001680:	0800171f 	.word	0x0800171f
 8001684:	0800171f 	.word	0x0800171f
 8001688:	0800171f 	.word	0x0800171f
 800168c:	0800171f 	.word	0x0800171f
 8001690:	0800171f 	.word	0x0800171f
 8001694:	0800171f 	.word	0x0800171f
 8001698:	0800171f 	.word	0x0800171f
 800169c:	0800171f 	.word	0x0800171f
 80016a0:	0800171f 	.word	0x0800171f
 80016a4:	0800171f 	.word	0x0800171f
 80016a8:	0800171f 	.word	0x0800171f
 80016ac:	0800171f 	.word	0x0800171f
 80016b0:	0800171f 	.word	0x0800171f
 80016b4:	080016cd 	.word	0x080016cd
 80016b8:	080016e1 	.word	0x080016e1
 80016bc:	4a82      	ldr	r2, [pc, #520]	; (80018c8 <HAL_GPIO_Init+0x2d8>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d013      	beq.n	80016ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016c2:	e02c      	b.n	800171e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	623b      	str	r3, [r7, #32]
          break;
 80016ca:	e029      	b.n	8001720 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	3304      	adds	r3, #4
 80016d2:	623b      	str	r3, [r7, #32]
          break;
 80016d4:	e024      	b.n	8001720 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	3308      	adds	r3, #8
 80016dc:	623b      	str	r3, [r7, #32]
          break;
 80016de:	e01f      	b.n	8001720 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	330c      	adds	r3, #12
 80016e6:	623b      	str	r3, [r7, #32]
          break;
 80016e8:	e01a      	b.n	8001720 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d102      	bne.n	80016f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016f2:	2304      	movs	r3, #4
 80016f4:	623b      	str	r3, [r7, #32]
          break;
 80016f6:	e013      	b.n	8001720 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d105      	bne.n	800170c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001700:	2308      	movs	r3, #8
 8001702:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	69fa      	ldr	r2, [r7, #28]
 8001708:	611a      	str	r2, [r3, #16]
          break;
 800170a:	e009      	b.n	8001720 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800170c:	2308      	movs	r3, #8
 800170e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	69fa      	ldr	r2, [r7, #28]
 8001714:	615a      	str	r2, [r3, #20]
          break;
 8001716:	e003      	b.n	8001720 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001718:	2300      	movs	r3, #0
 800171a:	623b      	str	r3, [r7, #32]
          break;
 800171c:	e000      	b.n	8001720 <HAL_GPIO_Init+0x130>
          break;
 800171e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	2bff      	cmp	r3, #255	; 0xff
 8001724:	d801      	bhi.n	800172a <HAL_GPIO_Init+0x13a>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	e001      	b.n	800172e <HAL_GPIO_Init+0x13e>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	3304      	adds	r3, #4
 800172e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	2bff      	cmp	r3, #255	; 0xff
 8001734:	d802      	bhi.n	800173c <HAL_GPIO_Init+0x14c>
 8001736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	e002      	b.n	8001742 <HAL_GPIO_Init+0x152>
 800173c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173e:	3b08      	subs	r3, #8
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	210f      	movs	r1, #15
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	fa01 f303 	lsl.w	r3, r1, r3
 8001750:	43db      	mvns	r3, r3
 8001752:	401a      	ands	r2, r3
 8001754:	6a39      	ldr	r1, [r7, #32]
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	fa01 f303 	lsl.w	r3, r1, r3
 800175c:	431a      	orrs	r2, r3
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176a:	2b00      	cmp	r3, #0
 800176c:	f000 8090 	beq.w	8001890 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001770:	4b56      	ldr	r3, [pc, #344]	; (80018cc <HAL_GPIO_Init+0x2dc>)
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	4a55      	ldr	r2, [pc, #340]	; (80018cc <HAL_GPIO_Init+0x2dc>)
 8001776:	f043 0301 	orr.w	r3, r3, #1
 800177a:	6193      	str	r3, [r2, #24]
 800177c:	4b53      	ldr	r3, [pc, #332]	; (80018cc <HAL_GPIO_Init+0x2dc>)
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	f003 0301 	and.w	r3, r3, #1
 8001784:	60bb      	str	r3, [r7, #8]
 8001786:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001788:	4a51      	ldr	r2, [pc, #324]	; (80018d0 <HAL_GPIO_Init+0x2e0>)
 800178a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178c:	089b      	lsrs	r3, r3, #2
 800178e:	3302      	adds	r3, #2
 8001790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001794:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001798:	f003 0303 	and.w	r3, r3, #3
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	220f      	movs	r2, #15
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	43db      	mvns	r3, r3
 80017a6:	68fa      	ldr	r2, [r7, #12]
 80017a8:	4013      	ands	r3, r2
 80017aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	4a49      	ldr	r2, [pc, #292]	; (80018d4 <HAL_GPIO_Init+0x2e4>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d00d      	beq.n	80017d0 <HAL_GPIO_Init+0x1e0>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4a48      	ldr	r2, [pc, #288]	; (80018d8 <HAL_GPIO_Init+0x2e8>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d007      	beq.n	80017cc <HAL_GPIO_Init+0x1dc>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4a47      	ldr	r2, [pc, #284]	; (80018dc <HAL_GPIO_Init+0x2ec>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d101      	bne.n	80017c8 <HAL_GPIO_Init+0x1d8>
 80017c4:	2302      	movs	r3, #2
 80017c6:	e004      	b.n	80017d2 <HAL_GPIO_Init+0x1e2>
 80017c8:	2303      	movs	r3, #3
 80017ca:	e002      	b.n	80017d2 <HAL_GPIO_Init+0x1e2>
 80017cc:	2301      	movs	r3, #1
 80017ce:	e000      	b.n	80017d2 <HAL_GPIO_Init+0x1e2>
 80017d0:	2300      	movs	r3, #0
 80017d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017d4:	f002 0203 	and.w	r2, r2, #3
 80017d8:	0092      	lsls	r2, r2, #2
 80017da:	4093      	lsls	r3, r2
 80017dc:	68fa      	ldr	r2, [r7, #12]
 80017de:	4313      	orrs	r3, r2
 80017e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017e2:	493b      	ldr	r1, [pc, #236]	; (80018d0 <HAL_GPIO_Init+0x2e0>)
 80017e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e6:	089b      	lsrs	r3, r3, #2
 80017e8:	3302      	adds	r3, #2
 80017ea:	68fa      	ldr	r2, [r7, #12]
 80017ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d006      	beq.n	800180a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017fc:	4b38      	ldr	r3, [pc, #224]	; (80018e0 <HAL_GPIO_Init+0x2f0>)
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	4937      	ldr	r1, [pc, #220]	; (80018e0 <HAL_GPIO_Init+0x2f0>)
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	4313      	orrs	r3, r2
 8001806:	600b      	str	r3, [r1, #0]
 8001808:	e006      	b.n	8001818 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800180a:	4b35      	ldr	r3, [pc, #212]	; (80018e0 <HAL_GPIO_Init+0x2f0>)
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	43db      	mvns	r3, r3
 8001812:	4933      	ldr	r1, [pc, #204]	; (80018e0 <HAL_GPIO_Init+0x2f0>)
 8001814:	4013      	ands	r3, r2
 8001816:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d006      	beq.n	8001832 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001824:	4b2e      	ldr	r3, [pc, #184]	; (80018e0 <HAL_GPIO_Init+0x2f0>)
 8001826:	685a      	ldr	r2, [r3, #4]
 8001828:	492d      	ldr	r1, [pc, #180]	; (80018e0 <HAL_GPIO_Init+0x2f0>)
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	4313      	orrs	r3, r2
 800182e:	604b      	str	r3, [r1, #4]
 8001830:	e006      	b.n	8001840 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001832:	4b2b      	ldr	r3, [pc, #172]	; (80018e0 <HAL_GPIO_Init+0x2f0>)
 8001834:	685a      	ldr	r2, [r3, #4]
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	43db      	mvns	r3, r3
 800183a:	4929      	ldr	r1, [pc, #164]	; (80018e0 <HAL_GPIO_Init+0x2f0>)
 800183c:	4013      	ands	r3, r2
 800183e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d006      	beq.n	800185a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800184c:	4b24      	ldr	r3, [pc, #144]	; (80018e0 <HAL_GPIO_Init+0x2f0>)
 800184e:	689a      	ldr	r2, [r3, #8]
 8001850:	4923      	ldr	r1, [pc, #140]	; (80018e0 <HAL_GPIO_Init+0x2f0>)
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	4313      	orrs	r3, r2
 8001856:	608b      	str	r3, [r1, #8]
 8001858:	e006      	b.n	8001868 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800185a:	4b21      	ldr	r3, [pc, #132]	; (80018e0 <HAL_GPIO_Init+0x2f0>)
 800185c:	689a      	ldr	r2, [r3, #8]
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	43db      	mvns	r3, r3
 8001862:	491f      	ldr	r1, [pc, #124]	; (80018e0 <HAL_GPIO_Init+0x2f0>)
 8001864:	4013      	ands	r3, r2
 8001866:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d006      	beq.n	8001882 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001874:	4b1a      	ldr	r3, [pc, #104]	; (80018e0 <HAL_GPIO_Init+0x2f0>)
 8001876:	68da      	ldr	r2, [r3, #12]
 8001878:	4919      	ldr	r1, [pc, #100]	; (80018e0 <HAL_GPIO_Init+0x2f0>)
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	4313      	orrs	r3, r2
 800187e:	60cb      	str	r3, [r1, #12]
 8001880:	e006      	b.n	8001890 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001882:	4b17      	ldr	r3, [pc, #92]	; (80018e0 <HAL_GPIO_Init+0x2f0>)
 8001884:	68da      	ldr	r2, [r3, #12]
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	43db      	mvns	r3, r3
 800188a:	4915      	ldr	r1, [pc, #84]	; (80018e0 <HAL_GPIO_Init+0x2f0>)
 800188c:	4013      	ands	r3, r2
 800188e:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001892:	3301      	adds	r3, #1
 8001894:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189c:	fa22 f303 	lsr.w	r3, r2, r3
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f47f aeaf 	bne.w	8001604 <HAL_GPIO_Init+0x14>
  }
}
 80018a6:	bf00      	nop
 80018a8:	bf00      	nop
 80018aa:	372c      	adds	r7, #44	; 0x2c
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc80      	pop	{r7}
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	10320000 	.word	0x10320000
 80018b8:	10310000 	.word	0x10310000
 80018bc:	10220000 	.word	0x10220000
 80018c0:	10210000 	.word	0x10210000
 80018c4:	10120000 	.word	0x10120000
 80018c8:	10110000 	.word	0x10110000
 80018cc:	40021000 	.word	0x40021000
 80018d0:	40010000 	.word	0x40010000
 80018d4:	40010800 	.word	0x40010800
 80018d8:	40010c00 	.word	0x40010c00
 80018dc:	40011000 	.word	0x40011000
 80018e0:	40010400 	.word	0x40010400

080018e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	460b      	mov	r3, r1
 80018ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689a      	ldr	r2, [r3, #8]
 80018f4:	887b      	ldrh	r3, [r7, #2]
 80018f6:	4013      	ands	r3, r2
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d002      	beq.n	8001902 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018fc:	2301      	movs	r3, #1
 80018fe:	73fb      	strb	r3, [r7, #15]
 8001900:	e001      	b.n	8001906 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001902:	2300      	movs	r3, #0
 8001904:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001906:	7bfb      	ldrb	r3, [r7, #15]
}
 8001908:	4618      	mov	r0, r3
 800190a:	3714      	adds	r7, #20
 800190c:	46bd      	mov	sp, r7
 800190e:	bc80      	pop	{r7}
 8001910:	4770      	bx	lr

08001912 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001912:	b480      	push	{r7}
 8001914:	b083      	sub	sp, #12
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
 800191a:	460b      	mov	r3, r1
 800191c:	807b      	strh	r3, [r7, #2]
 800191e:	4613      	mov	r3, r2
 8001920:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001922:	787b      	ldrb	r3, [r7, #1]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d003      	beq.n	8001930 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001928:	887a      	ldrh	r2, [r7, #2]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800192e:	e003      	b.n	8001938 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001930:	887b      	ldrh	r3, [r7, #2]
 8001932:	041a      	lsls	r2, r3, #16
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	611a      	str	r2, [r3, #16]
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	bc80      	pop	{r7}
 8001940:	4770      	bx	lr

08001942 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001942:	b480      	push	{r7}
 8001944:	b085      	sub	sp, #20
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
 800194a:	460b      	mov	r3, r1
 800194c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001954:	887a      	ldrh	r2, [r7, #2]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	4013      	ands	r3, r2
 800195a:	041a      	lsls	r2, r3, #16
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	43d9      	mvns	r1, r3
 8001960:	887b      	ldrh	r3, [r7, #2]
 8001962:	400b      	ands	r3, r1
 8001964:	431a      	orrs	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	611a      	str	r2, [r3, #16]
}
 800196a:	bf00      	nop
 800196c:	3714      	adds	r7, #20
 800196e:	46bd      	mov	sp, r7
 8001970:	bc80      	pop	{r7}
 8001972:	4770      	bx	lr

08001974 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d101      	bne.n	8001986 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e26c      	b.n	8001e60 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	2b00      	cmp	r3, #0
 8001990:	f000 8087 	beq.w	8001aa2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001994:	4b92      	ldr	r3, [pc, #584]	; (8001be0 <HAL_RCC_OscConfig+0x26c>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f003 030c 	and.w	r3, r3, #12
 800199c:	2b04      	cmp	r3, #4
 800199e:	d00c      	beq.n	80019ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019a0:	4b8f      	ldr	r3, [pc, #572]	; (8001be0 <HAL_RCC_OscConfig+0x26c>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f003 030c 	and.w	r3, r3, #12
 80019a8:	2b08      	cmp	r3, #8
 80019aa:	d112      	bne.n	80019d2 <HAL_RCC_OscConfig+0x5e>
 80019ac:	4b8c      	ldr	r3, [pc, #560]	; (8001be0 <HAL_RCC_OscConfig+0x26c>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019b8:	d10b      	bne.n	80019d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ba:	4b89      	ldr	r3, [pc, #548]	; (8001be0 <HAL_RCC_OscConfig+0x26c>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d06c      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x12c>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d168      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e246      	b.n	8001e60 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019da:	d106      	bne.n	80019ea <HAL_RCC_OscConfig+0x76>
 80019dc:	4b80      	ldr	r3, [pc, #512]	; (8001be0 <HAL_RCC_OscConfig+0x26c>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a7f      	ldr	r2, [pc, #508]	; (8001be0 <HAL_RCC_OscConfig+0x26c>)
 80019e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e6:	6013      	str	r3, [r2, #0]
 80019e8:	e02e      	b.n	8001a48 <HAL_RCC_OscConfig+0xd4>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d10c      	bne.n	8001a0c <HAL_RCC_OscConfig+0x98>
 80019f2:	4b7b      	ldr	r3, [pc, #492]	; (8001be0 <HAL_RCC_OscConfig+0x26c>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a7a      	ldr	r2, [pc, #488]	; (8001be0 <HAL_RCC_OscConfig+0x26c>)
 80019f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019fc:	6013      	str	r3, [r2, #0]
 80019fe:	4b78      	ldr	r3, [pc, #480]	; (8001be0 <HAL_RCC_OscConfig+0x26c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a77      	ldr	r2, [pc, #476]	; (8001be0 <HAL_RCC_OscConfig+0x26c>)
 8001a04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a08:	6013      	str	r3, [r2, #0]
 8001a0a:	e01d      	b.n	8001a48 <HAL_RCC_OscConfig+0xd4>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a14:	d10c      	bne.n	8001a30 <HAL_RCC_OscConfig+0xbc>
 8001a16:	4b72      	ldr	r3, [pc, #456]	; (8001be0 <HAL_RCC_OscConfig+0x26c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a71      	ldr	r2, [pc, #452]	; (8001be0 <HAL_RCC_OscConfig+0x26c>)
 8001a1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a20:	6013      	str	r3, [r2, #0]
 8001a22:	4b6f      	ldr	r3, [pc, #444]	; (8001be0 <HAL_RCC_OscConfig+0x26c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a6e      	ldr	r2, [pc, #440]	; (8001be0 <HAL_RCC_OscConfig+0x26c>)
 8001a28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a2c:	6013      	str	r3, [r2, #0]
 8001a2e:	e00b      	b.n	8001a48 <HAL_RCC_OscConfig+0xd4>
 8001a30:	4b6b      	ldr	r3, [pc, #428]	; (8001be0 <HAL_RCC_OscConfig+0x26c>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a6a      	ldr	r2, [pc, #424]	; (8001be0 <HAL_RCC_OscConfig+0x26c>)
 8001a36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a3a:	6013      	str	r3, [r2, #0]
 8001a3c:	4b68      	ldr	r3, [pc, #416]	; (8001be0 <HAL_RCC_OscConfig+0x26c>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a67      	ldr	r2, [pc, #412]	; (8001be0 <HAL_RCC_OscConfig+0x26c>)
 8001a42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a46:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d013      	beq.n	8001a78 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a50:	f7ff fcb6 	bl	80013c0 <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a58:	f7ff fcb2 	bl	80013c0 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b64      	cmp	r3, #100	; 0x64
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e1fa      	b.n	8001e60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a6a:	4b5d      	ldr	r3, [pc, #372]	; (8001be0 <HAL_RCC_OscConfig+0x26c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d0f0      	beq.n	8001a58 <HAL_RCC_OscConfig+0xe4>
 8001a76:	e014      	b.n	8001aa2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a78:	f7ff fca2 	bl	80013c0 <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a80:	f7ff fc9e 	bl	80013c0 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b64      	cmp	r3, #100	; 0x64
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e1e6      	b.n	8001e60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a92:	4b53      	ldr	r3, [pc, #332]	; (8001be0 <HAL_RCC_OscConfig+0x26c>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d1f0      	bne.n	8001a80 <HAL_RCC_OscConfig+0x10c>
 8001a9e:	e000      	b.n	8001aa2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d063      	beq.n	8001b76 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001aae:	4b4c      	ldr	r3, [pc, #304]	; (8001be0 <HAL_RCC_OscConfig+0x26c>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f003 030c 	and.w	r3, r3, #12
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d00b      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001aba:	4b49      	ldr	r3, [pc, #292]	; (8001be0 <HAL_RCC_OscConfig+0x26c>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f003 030c 	and.w	r3, r3, #12
 8001ac2:	2b08      	cmp	r3, #8
 8001ac4:	d11c      	bne.n	8001b00 <HAL_RCC_OscConfig+0x18c>
 8001ac6:	4b46      	ldr	r3, [pc, #280]	; (8001be0 <HAL_RCC_OscConfig+0x26c>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d116      	bne.n	8001b00 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ad2:	4b43      	ldr	r3, [pc, #268]	; (8001be0 <HAL_RCC_OscConfig+0x26c>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d005      	beq.n	8001aea <HAL_RCC_OscConfig+0x176>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	691b      	ldr	r3, [r3, #16]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d001      	beq.n	8001aea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e1ba      	b.n	8001e60 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aea:	4b3d      	ldr	r3, [pc, #244]	; (8001be0 <HAL_RCC_OscConfig+0x26c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	695b      	ldr	r3, [r3, #20]
 8001af6:	00db      	lsls	r3, r3, #3
 8001af8:	4939      	ldr	r1, [pc, #228]	; (8001be0 <HAL_RCC_OscConfig+0x26c>)
 8001afa:	4313      	orrs	r3, r2
 8001afc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001afe:	e03a      	b.n	8001b76 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	691b      	ldr	r3, [r3, #16]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d020      	beq.n	8001b4a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b08:	4b36      	ldr	r3, [pc, #216]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b0e:	f7ff fc57 	bl	80013c0 <HAL_GetTick>
 8001b12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b14:	e008      	b.n	8001b28 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b16:	f7ff fc53 	bl	80013c0 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e19b      	b.n	8001e60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b28:	4b2d      	ldr	r3, [pc, #180]	; (8001be0 <HAL_RCC_OscConfig+0x26c>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0302 	and.w	r3, r3, #2
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d0f0      	beq.n	8001b16 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b34:	4b2a      	ldr	r3, [pc, #168]	; (8001be0 <HAL_RCC_OscConfig+0x26c>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	695b      	ldr	r3, [r3, #20]
 8001b40:	00db      	lsls	r3, r3, #3
 8001b42:	4927      	ldr	r1, [pc, #156]	; (8001be0 <HAL_RCC_OscConfig+0x26c>)
 8001b44:	4313      	orrs	r3, r2
 8001b46:	600b      	str	r3, [r1, #0]
 8001b48:	e015      	b.n	8001b76 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b4a:	4b26      	ldr	r3, [pc, #152]	; (8001be4 <HAL_RCC_OscConfig+0x270>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b50:	f7ff fc36 	bl	80013c0 <HAL_GetTick>
 8001b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b58:	f7ff fc32 	bl	80013c0 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e17a      	b.n	8001e60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b6a:	4b1d      	ldr	r3, [pc, #116]	; (8001be0 <HAL_RCC_OscConfig+0x26c>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1f0      	bne.n	8001b58 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0308 	and.w	r3, r3, #8
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d03a      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	699b      	ldr	r3, [r3, #24]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d019      	beq.n	8001bbe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b8a:	4b17      	ldr	r3, [pc, #92]	; (8001be8 <HAL_RCC_OscConfig+0x274>)
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b90:	f7ff fc16 	bl	80013c0 <HAL_GetTick>
 8001b94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b96:	e008      	b.n	8001baa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b98:	f7ff fc12 	bl	80013c0 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e15a      	b.n	8001e60 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001baa:	4b0d      	ldr	r3, [pc, #52]	; (8001be0 <HAL_RCC_OscConfig+0x26c>)
 8001bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d0f0      	beq.n	8001b98 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001bb6:	2001      	movs	r0, #1
 8001bb8:	f000 faa6 	bl	8002108 <RCC_Delay>
 8001bbc:	e01c      	b.n	8001bf8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bbe:	4b0a      	ldr	r3, [pc, #40]	; (8001be8 <HAL_RCC_OscConfig+0x274>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bc4:	f7ff fbfc 	bl	80013c0 <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bca:	e00f      	b.n	8001bec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bcc:	f7ff fbf8 	bl	80013c0 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d908      	bls.n	8001bec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e140      	b.n	8001e60 <HAL_RCC_OscConfig+0x4ec>
 8001bde:	bf00      	nop
 8001be0:	40021000 	.word	0x40021000
 8001be4:	42420000 	.word	0x42420000
 8001be8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bec:	4b9e      	ldr	r3, [pc, #632]	; (8001e68 <HAL_RCC_OscConfig+0x4f4>)
 8001bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d1e9      	bne.n	8001bcc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0304 	and.w	r3, r3, #4
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	f000 80a6 	beq.w	8001d52 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c06:	2300      	movs	r3, #0
 8001c08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c0a:	4b97      	ldr	r3, [pc, #604]	; (8001e68 <HAL_RCC_OscConfig+0x4f4>)
 8001c0c:	69db      	ldr	r3, [r3, #28]
 8001c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d10d      	bne.n	8001c32 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c16:	4b94      	ldr	r3, [pc, #592]	; (8001e68 <HAL_RCC_OscConfig+0x4f4>)
 8001c18:	69db      	ldr	r3, [r3, #28]
 8001c1a:	4a93      	ldr	r2, [pc, #588]	; (8001e68 <HAL_RCC_OscConfig+0x4f4>)
 8001c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c20:	61d3      	str	r3, [r2, #28]
 8001c22:	4b91      	ldr	r3, [pc, #580]	; (8001e68 <HAL_RCC_OscConfig+0x4f4>)
 8001c24:	69db      	ldr	r3, [r3, #28]
 8001c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c2a:	60bb      	str	r3, [r7, #8]
 8001c2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c32:	4b8e      	ldr	r3, [pc, #568]	; (8001e6c <HAL_RCC_OscConfig+0x4f8>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d118      	bne.n	8001c70 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c3e:	4b8b      	ldr	r3, [pc, #556]	; (8001e6c <HAL_RCC_OscConfig+0x4f8>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a8a      	ldr	r2, [pc, #552]	; (8001e6c <HAL_RCC_OscConfig+0x4f8>)
 8001c44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c4a:	f7ff fbb9 	bl	80013c0 <HAL_GetTick>
 8001c4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c50:	e008      	b.n	8001c64 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c52:	f7ff fbb5 	bl	80013c0 <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	2b64      	cmp	r3, #100	; 0x64
 8001c5e:	d901      	bls.n	8001c64 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e0fd      	b.n	8001e60 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c64:	4b81      	ldr	r3, [pc, #516]	; (8001e6c <HAL_RCC_OscConfig+0x4f8>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d0f0      	beq.n	8001c52 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d106      	bne.n	8001c86 <HAL_RCC_OscConfig+0x312>
 8001c78:	4b7b      	ldr	r3, [pc, #492]	; (8001e68 <HAL_RCC_OscConfig+0x4f4>)
 8001c7a:	6a1b      	ldr	r3, [r3, #32]
 8001c7c:	4a7a      	ldr	r2, [pc, #488]	; (8001e68 <HAL_RCC_OscConfig+0x4f4>)
 8001c7e:	f043 0301 	orr.w	r3, r3, #1
 8001c82:	6213      	str	r3, [r2, #32]
 8001c84:	e02d      	b.n	8001ce2 <HAL_RCC_OscConfig+0x36e>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d10c      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x334>
 8001c8e:	4b76      	ldr	r3, [pc, #472]	; (8001e68 <HAL_RCC_OscConfig+0x4f4>)
 8001c90:	6a1b      	ldr	r3, [r3, #32]
 8001c92:	4a75      	ldr	r2, [pc, #468]	; (8001e68 <HAL_RCC_OscConfig+0x4f4>)
 8001c94:	f023 0301 	bic.w	r3, r3, #1
 8001c98:	6213      	str	r3, [r2, #32]
 8001c9a:	4b73      	ldr	r3, [pc, #460]	; (8001e68 <HAL_RCC_OscConfig+0x4f4>)
 8001c9c:	6a1b      	ldr	r3, [r3, #32]
 8001c9e:	4a72      	ldr	r2, [pc, #456]	; (8001e68 <HAL_RCC_OscConfig+0x4f4>)
 8001ca0:	f023 0304 	bic.w	r3, r3, #4
 8001ca4:	6213      	str	r3, [r2, #32]
 8001ca6:	e01c      	b.n	8001ce2 <HAL_RCC_OscConfig+0x36e>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	2b05      	cmp	r3, #5
 8001cae:	d10c      	bne.n	8001cca <HAL_RCC_OscConfig+0x356>
 8001cb0:	4b6d      	ldr	r3, [pc, #436]	; (8001e68 <HAL_RCC_OscConfig+0x4f4>)
 8001cb2:	6a1b      	ldr	r3, [r3, #32]
 8001cb4:	4a6c      	ldr	r2, [pc, #432]	; (8001e68 <HAL_RCC_OscConfig+0x4f4>)
 8001cb6:	f043 0304 	orr.w	r3, r3, #4
 8001cba:	6213      	str	r3, [r2, #32]
 8001cbc:	4b6a      	ldr	r3, [pc, #424]	; (8001e68 <HAL_RCC_OscConfig+0x4f4>)
 8001cbe:	6a1b      	ldr	r3, [r3, #32]
 8001cc0:	4a69      	ldr	r2, [pc, #420]	; (8001e68 <HAL_RCC_OscConfig+0x4f4>)
 8001cc2:	f043 0301 	orr.w	r3, r3, #1
 8001cc6:	6213      	str	r3, [r2, #32]
 8001cc8:	e00b      	b.n	8001ce2 <HAL_RCC_OscConfig+0x36e>
 8001cca:	4b67      	ldr	r3, [pc, #412]	; (8001e68 <HAL_RCC_OscConfig+0x4f4>)
 8001ccc:	6a1b      	ldr	r3, [r3, #32]
 8001cce:	4a66      	ldr	r2, [pc, #408]	; (8001e68 <HAL_RCC_OscConfig+0x4f4>)
 8001cd0:	f023 0301 	bic.w	r3, r3, #1
 8001cd4:	6213      	str	r3, [r2, #32]
 8001cd6:	4b64      	ldr	r3, [pc, #400]	; (8001e68 <HAL_RCC_OscConfig+0x4f4>)
 8001cd8:	6a1b      	ldr	r3, [r3, #32]
 8001cda:	4a63      	ldr	r2, [pc, #396]	; (8001e68 <HAL_RCC_OscConfig+0x4f4>)
 8001cdc:	f023 0304 	bic.w	r3, r3, #4
 8001ce0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d015      	beq.n	8001d16 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cea:	f7ff fb69 	bl	80013c0 <HAL_GetTick>
 8001cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cf0:	e00a      	b.n	8001d08 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cf2:	f7ff fb65 	bl	80013c0 <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d901      	bls.n	8001d08 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e0ab      	b.n	8001e60 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d08:	4b57      	ldr	r3, [pc, #348]	; (8001e68 <HAL_RCC_OscConfig+0x4f4>)
 8001d0a:	6a1b      	ldr	r3, [r3, #32]
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d0ee      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x37e>
 8001d14:	e014      	b.n	8001d40 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d16:	f7ff fb53 	bl	80013c0 <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d1c:	e00a      	b.n	8001d34 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d1e:	f7ff fb4f 	bl	80013c0 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d901      	bls.n	8001d34 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e095      	b.n	8001e60 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d34:	4b4c      	ldr	r3, [pc, #304]	; (8001e68 <HAL_RCC_OscConfig+0x4f4>)
 8001d36:	6a1b      	ldr	r3, [r3, #32]
 8001d38:	f003 0302 	and.w	r3, r3, #2
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d1ee      	bne.n	8001d1e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d40:	7dfb      	ldrb	r3, [r7, #23]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d105      	bne.n	8001d52 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d46:	4b48      	ldr	r3, [pc, #288]	; (8001e68 <HAL_RCC_OscConfig+0x4f4>)
 8001d48:	69db      	ldr	r3, [r3, #28]
 8001d4a:	4a47      	ldr	r2, [pc, #284]	; (8001e68 <HAL_RCC_OscConfig+0x4f4>)
 8001d4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d50:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	69db      	ldr	r3, [r3, #28]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	f000 8081 	beq.w	8001e5e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d5c:	4b42      	ldr	r3, [pc, #264]	; (8001e68 <HAL_RCC_OscConfig+0x4f4>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f003 030c 	and.w	r3, r3, #12
 8001d64:	2b08      	cmp	r3, #8
 8001d66:	d061      	beq.n	8001e2c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	69db      	ldr	r3, [r3, #28]
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d146      	bne.n	8001dfe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d70:	4b3f      	ldr	r3, [pc, #252]	; (8001e70 <HAL_RCC_OscConfig+0x4fc>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d76:	f7ff fb23 	bl	80013c0 <HAL_GetTick>
 8001d7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d7c:	e008      	b.n	8001d90 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d7e:	f7ff fb1f 	bl	80013c0 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e067      	b.n	8001e60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d90:	4b35      	ldr	r3, [pc, #212]	; (8001e68 <HAL_RCC_OscConfig+0x4f4>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1f0      	bne.n	8001d7e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a1b      	ldr	r3, [r3, #32]
 8001da0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001da4:	d108      	bne.n	8001db8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001da6:	4b30      	ldr	r3, [pc, #192]	; (8001e68 <HAL_RCC_OscConfig+0x4f4>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	492d      	ldr	r1, [pc, #180]	; (8001e68 <HAL_RCC_OscConfig+0x4f4>)
 8001db4:	4313      	orrs	r3, r2
 8001db6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001db8:	4b2b      	ldr	r3, [pc, #172]	; (8001e68 <HAL_RCC_OscConfig+0x4f4>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6a19      	ldr	r1, [r3, #32]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc8:	430b      	orrs	r3, r1
 8001dca:	4927      	ldr	r1, [pc, #156]	; (8001e68 <HAL_RCC_OscConfig+0x4f4>)
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dd0:	4b27      	ldr	r3, [pc, #156]	; (8001e70 <HAL_RCC_OscConfig+0x4fc>)
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd6:	f7ff faf3 	bl	80013c0 <HAL_GetTick>
 8001dda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ddc:	e008      	b.n	8001df0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dde:	f7ff faef 	bl	80013c0 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d901      	bls.n	8001df0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e037      	b.n	8001e60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001df0:	4b1d      	ldr	r3, [pc, #116]	; (8001e68 <HAL_RCC_OscConfig+0x4f4>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d0f0      	beq.n	8001dde <HAL_RCC_OscConfig+0x46a>
 8001dfc:	e02f      	b.n	8001e5e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dfe:	4b1c      	ldr	r3, [pc, #112]	; (8001e70 <HAL_RCC_OscConfig+0x4fc>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e04:	f7ff fadc 	bl	80013c0 <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e0c:	f7ff fad8 	bl	80013c0 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e020      	b.n	8001e60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e1e:	4b12      	ldr	r3, [pc, #72]	; (8001e68 <HAL_RCC_OscConfig+0x4f4>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1f0      	bne.n	8001e0c <HAL_RCC_OscConfig+0x498>
 8001e2a:	e018      	b.n	8001e5e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	69db      	ldr	r3, [r3, #28]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d101      	bne.n	8001e38 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e013      	b.n	8001e60 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e38:	4b0b      	ldr	r3, [pc, #44]	; (8001e68 <HAL_RCC_OscConfig+0x4f4>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a1b      	ldr	r3, [r3, #32]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d106      	bne.n	8001e5a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d001      	beq.n	8001e5e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e000      	b.n	8001e60 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001e5e:	2300      	movs	r3, #0
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3718      	adds	r7, #24
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	40007000 	.word	0x40007000
 8001e70:	42420060 	.word	0x42420060

08001e74 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d101      	bne.n	8001e88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e0d0      	b.n	800202a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e88:	4b6a      	ldr	r3, [pc, #424]	; (8002034 <HAL_RCC_ClockConfig+0x1c0>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0307 	and.w	r3, r3, #7
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d910      	bls.n	8001eb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e96:	4b67      	ldr	r3, [pc, #412]	; (8002034 <HAL_RCC_ClockConfig+0x1c0>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f023 0207 	bic.w	r2, r3, #7
 8001e9e:	4965      	ldr	r1, [pc, #404]	; (8002034 <HAL_RCC_ClockConfig+0x1c0>)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ea6:	4b63      	ldr	r3, [pc, #396]	; (8002034 <HAL_RCC_ClockConfig+0x1c0>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0307 	and.w	r3, r3, #7
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d001      	beq.n	8001eb8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e0b8      	b.n	800202a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d020      	beq.n	8001f06 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0304 	and.w	r3, r3, #4
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d005      	beq.n	8001edc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ed0:	4b59      	ldr	r3, [pc, #356]	; (8002038 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	4a58      	ldr	r2, [pc, #352]	; (8002038 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001eda:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0308 	and.w	r3, r3, #8
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d005      	beq.n	8001ef4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ee8:	4b53      	ldr	r3, [pc, #332]	; (8002038 <HAL_RCC_ClockConfig+0x1c4>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	4a52      	ldr	r2, [pc, #328]	; (8002038 <HAL_RCC_ClockConfig+0x1c4>)
 8001eee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ef2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ef4:	4b50      	ldr	r3, [pc, #320]	; (8002038 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	494d      	ldr	r1, [pc, #308]	; (8002038 <HAL_RCC_ClockConfig+0x1c4>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d040      	beq.n	8001f94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d107      	bne.n	8001f2a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f1a:	4b47      	ldr	r3, [pc, #284]	; (8002038 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d115      	bne.n	8001f52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e07f      	b.n	800202a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d107      	bne.n	8001f42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f32:	4b41      	ldr	r3, [pc, #260]	; (8002038 <HAL_RCC_ClockConfig+0x1c4>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d109      	bne.n	8001f52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e073      	b.n	800202a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f42:	4b3d      	ldr	r3, [pc, #244]	; (8002038 <HAL_RCC_ClockConfig+0x1c4>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e06b      	b.n	800202a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f52:	4b39      	ldr	r3, [pc, #228]	; (8002038 <HAL_RCC_ClockConfig+0x1c4>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f023 0203 	bic.w	r2, r3, #3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	4936      	ldr	r1, [pc, #216]	; (8002038 <HAL_RCC_ClockConfig+0x1c4>)
 8001f60:	4313      	orrs	r3, r2
 8001f62:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f64:	f7ff fa2c 	bl	80013c0 <HAL_GetTick>
 8001f68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f6a:	e00a      	b.n	8001f82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f6c:	f7ff fa28 	bl	80013c0 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e053      	b.n	800202a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f82:	4b2d      	ldr	r3, [pc, #180]	; (8002038 <HAL_RCC_ClockConfig+0x1c4>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f003 020c 	and.w	r2, r3, #12
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d1eb      	bne.n	8001f6c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f94:	4b27      	ldr	r3, [pc, #156]	; (8002034 <HAL_RCC_ClockConfig+0x1c0>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0307 	and.w	r3, r3, #7
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d210      	bcs.n	8001fc4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa2:	4b24      	ldr	r3, [pc, #144]	; (8002034 <HAL_RCC_ClockConfig+0x1c0>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f023 0207 	bic.w	r2, r3, #7
 8001faa:	4922      	ldr	r1, [pc, #136]	; (8002034 <HAL_RCC_ClockConfig+0x1c0>)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb2:	4b20      	ldr	r3, [pc, #128]	; (8002034 <HAL_RCC_ClockConfig+0x1c0>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0307 	and.w	r3, r3, #7
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d001      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e032      	b.n	800202a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0304 	and.w	r3, r3, #4
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d008      	beq.n	8001fe2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fd0:	4b19      	ldr	r3, [pc, #100]	; (8002038 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	4916      	ldr	r1, [pc, #88]	; (8002038 <HAL_RCC_ClockConfig+0x1c4>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0308 	and.w	r3, r3, #8
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d009      	beq.n	8002002 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001fee:	4b12      	ldr	r3, [pc, #72]	; (8002038 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	490e      	ldr	r1, [pc, #56]	; (8002038 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002002:	f000 f821 	bl	8002048 <HAL_RCC_GetSysClockFreq>
 8002006:	4602      	mov	r2, r0
 8002008:	4b0b      	ldr	r3, [pc, #44]	; (8002038 <HAL_RCC_ClockConfig+0x1c4>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	091b      	lsrs	r3, r3, #4
 800200e:	f003 030f 	and.w	r3, r3, #15
 8002012:	490a      	ldr	r1, [pc, #40]	; (800203c <HAL_RCC_ClockConfig+0x1c8>)
 8002014:	5ccb      	ldrb	r3, [r1, r3]
 8002016:	fa22 f303 	lsr.w	r3, r2, r3
 800201a:	4a09      	ldr	r2, [pc, #36]	; (8002040 <HAL_RCC_ClockConfig+0x1cc>)
 800201c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800201e:	4b09      	ldr	r3, [pc, #36]	; (8002044 <HAL_RCC_ClockConfig+0x1d0>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f7ff f98a 	bl	800133c <HAL_InitTick>

  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	40022000 	.word	0x40022000
 8002038:	40021000 	.word	0x40021000
 800203c:	08002994 	.word	0x08002994
 8002040:	20000078 	.word	0x20000078
 8002044:	2000007c 	.word	0x2000007c

08002048 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002048:	b490      	push	{r4, r7}
 800204a:	b08a      	sub	sp, #40	; 0x28
 800204c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800204e:	4b2a      	ldr	r3, [pc, #168]	; (80020f8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002050:	1d3c      	adds	r4, r7, #4
 8002052:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002054:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002058:	f240 2301 	movw	r3, #513	; 0x201
 800205c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800205e:	2300      	movs	r3, #0
 8002060:	61fb      	str	r3, [r7, #28]
 8002062:	2300      	movs	r3, #0
 8002064:	61bb      	str	r3, [r7, #24]
 8002066:	2300      	movs	r3, #0
 8002068:	627b      	str	r3, [r7, #36]	; 0x24
 800206a:	2300      	movs	r3, #0
 800206c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800206e:	2300      	movs	r3, #0
 8002070:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002072:	4b22      	ldr	r3, [pc, #136]	; (80020fc <HAL_RCC_GetSysClockFreq+0xb4>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	f003 030c 	and.w	r3, r3, #12
 800207e:	2b04      	cmp	r3, #4
 8002080:	d002      	beq.n	8002088 <HAL_RCC_GetSysClockFreq+0x40>
 8002082:	2b08      	cmp	r3, #8
 8002084:	d003      	beq.n	800208e <HAL_RCC_GetSysClockFreq+0x46>
 8002086:	e02d      	b.n	80020e4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002088:	4b1d      	ldr	r3, [pc, #116]	; (8002100 <HAL_RCC_GetSysClockFreq+0xb8>)
 800208a:	623b      	str	r3, [r7, #32]
      break;
 800208c:	e02d      	b.n	80020ea <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	0c9b      	lsrs	r3, r3, #18
 8002092:	f003 030f 	and.w	r3, r3, #15
 8002096:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800209a:	4413      	add	r3, r2
 800209c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80020a0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d013      	beq.n	80020d4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020ac:	4b13      	ldr	r3, [pc, #76]	; (80020fc <HAL_RCC_GetSysClockFreq+0xb4>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	0c5b      	lsrs	r3, r3, #17
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020ba:	4413      	add	r3, r2
 80020bc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80020c0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	4a0e      	ldr	r2, [pc, #56]	; (8002100 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020c6:	fb02 f203 	mul.w	r2, r2, r3
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d0:	627b      	str	r3, [r7, #36]	; 0x24
 80020d2:	e004      	b.n	80020de <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	4a0b      	ldr	r2, [pc, #44]	; (8002104 <HAL_RCC_GetSysClockFreq+0xbc>)
 80020d8:	fb02 f303 	mul.w	r3, r2, r3
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e0:	623b      	str	r3, [r7, #32]
      break;
 80020e2:	e002      	b.n	80020ea <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020e4:	4b06      	ldr	r3, [pc, #24]	; (8002100 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020e6:	623b      	str	r3, [r7, #32]
      break;
 80020e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020ea:	6a3b      	ldr	r3, [r7, #32]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3728      	adds	r7, #40	; 0x28
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bc90      	pop	{r4, r7}
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	0800297c 	.word	0x0800297c
 80020fc:	40021000 	.word	0x40021000
 8002100:	007a1200 	.word	0x007a1200
 8002104:	003d0900 	.word	0x003d0900

08002108 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002110:	4b0a      	ldr	r3, [pc, #40]	; (800213c <RCC_Delay+0x34>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a0a      	ldr	r2, [pc, #40]	; (8002140 <RCC_Delay+0x38>)
 8002116:	fba2 2303 	umull	r2, r3, r2, r3
 800211a:	0a5b      	lsrs	r3, r3, #9
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	fb02 f303 	mul.w	r3, r2, r3
 8002122:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002124:	bf00      	nop
  }
  while (Delay --);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	1e5a      	subs	r2, r3, #1
 800212a:	60fa      	str	r2, [r7, #12]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d1f9      	bne.n	8002124 <RCC_Delay+0x1c>
}
 8002130:	bf00      	nop
 8002132:	bf00      	nop
 8002134:	3714      	adds	r7, #20
 8002136:	46bd      	mov	sp, r7
 8002138:	bc80      	pop	{r7}
 800213a:	4770      	bx	lr
 800213c:	20000078 	.word	0x20000078
 8002140:	10624dd3 	.word	0x10624dd3

08002144 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d101      	bne.n	8002156 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e041      	b.n	80021da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800215c:	b2db      	uxtb	r3, r3
 800215e:	2b00      	cmp	r3, #0
 8002160:	d106      	bne.n	8002170 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f7fe ffca 	bl	8001104 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2202      	movs	r2, #2
 8002174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3304      	adds	r3, #4
 8002180:	4619      	mov	r1, r3
 8002182:	4610      	mov	r0, r2
 8002184:	f000 fa6a 	bl	800265c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
	...

080021e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d001      	beq.n	80021fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e035      	b.n	8002268 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2202      	movs	r2, #2
 8002200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	68da      	ldr	r2, [r3, #12]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f042 0201 	orr.w	r2, r2, #1
 8002212:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a16      	ldr	r2, [pc, #88]	; (8002274 <HAL_TIM_Base_Start_IT+0x90>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d009      	beq.n	8002232 <HAL_TIM_Base_Start_IT+0x4e>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002226:	d004      	beq.n	8002232 <HAL_TIM_Base_Start_IT+0x4e>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a12      	ldr	r2, [pc, #72]	; (8002278 <HAL_TIM_Base_Start_IT+0x94>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d111      	bne.n	8002256 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f003 0307 	and.w	r3, r3, #7
 800223c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2b06      	cmp	r3, #6
 8002242:	d010      	beq.n	8002266 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f042 0201 	orr.w	r2, r2, #1
 8002252:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002254:	e007      	b.n	8002266 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f042 0201 	orr.w	r2, r2, #1
 8002264:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	3714      	adds	r7, #20
 800226c:	46bd      	mov	sp, r7
 800226e:	bc80      	pop	{r7}
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	40012c00 	.word	0x40012c00
 8002278:	40000400 	.word	0x40000400

0800227c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b02      	cmp	r3, #2
 8002290:	d122      	bne.n	80022d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	f003 0302 	and.w	r3, r3, #2
 800229c:	2b02      	cmp	r3, #2
 800229e:	d11b      	bne.n	80022d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f06f 0202 	mvn.w	r2, #2
 80022a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2201      	movs	r2, #1
 80022ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	f003 0303 	and.w	r3, r3, #3
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d003      	beq.n	80022c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f000 f9b1 	bl	8002626 <HAL_TIM_IC_CaptureCallback>
 80022c4:	e005      	b.n	80022d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f000 f9a4 	bl	8002614 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f000 f9b3 	bl	8002638 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	f003 0304 	and.w	r3, r3, #4
 80022e2:	2b04      	cmp	r3, #4
 80022e4:	d122      	bne.n	800232c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	f003 0304 	and.w	r3, r3, #4
 80022f0:	2b04      	cmp	r3, #4
 80022f2:	d11b      	bne.n	800232c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f06f 0204 	mvn.w	r2, #4
 80022fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2202      	movs	r2, #2
 8002302:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800230e:	2b00      	cmp	r3, #0
 8002310:	d003      	beq.n	800231a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 f987 	bl	8002626 <HAL_TIM_IC_CaptureCallback>
 8002318:	e005      	b.n	8002326 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f000 f97a 	bl	8002614 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f000 f989 	bl	8002638 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	f003 0308 	and.w	r3, r3, #8
 8002336:	2b08      	cmp	r3, #8
 8002338:	d122      	bne.n	8002380 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	f003 0308 	and.w	r3, r3, #8
 8002344:	2b08      	cmp	r3, #8
 8002346:	d11b      	bne.n	8002380 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f06f 0208 	mvn.w	r2, #8
 8002350:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2204      	movs	r2, #4
 8002356:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	69db      	ldr	r3, [r3, #28]
 800235e:	f003 0303 	and.w	r3, r3, #3
 8002362:	2b00      	cmp	r3, #0
 8002364:	d003      	beq.n	800236e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f000 f95d 	bl	8002626 <HAL_TIM_IC_CaptureCallback>
 800236c:	e005      	b.n	800237a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 f950 	bl	8002614 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f000 f95f 	bl	8002638 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	f003 0310 	and.w	r3, r3, #16
 800238a:	2b10      	cmp	r3, #16
 800238c:	d122      	bne.n	80023d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	f003 0310 	and.w	r3, r3, #16
 8002398:	2b10      	cmp	r3, #16
 800239a:	d11b      	bne.n	80023d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f06f 0210 	mvn.w	r2, #16
 80023a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2208      	movs	r2, #8
 80023aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	69db      	ldr	r3, [r3, #28]
 80023b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d003      	beq.n	80023c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 f933 	bl	8002626 <HAL_TIM_IC_CaptureCallback>
 80023c0:	e005      	b.n	80023ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 f926 	bl	8002614 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f000 f935 	bl	8002638 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d10e      	bne.n	8002400 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	f003 0301 	and.w	r3, r3, #1
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d107      	bne.n	8002400 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f06f 0201 	mvn.w	r2, #1
 80023f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f7fe fe3a 	bl	8001074 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800240a:	2b80      	cmp	r3, #128	; 0x80
 800240c:	d10e      	bne.n	800242c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002418:	2b80      	cmp	r3, #128	; 0x80
 800241a:	d107      	bne.n	800242c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002424:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f000 fa67 	bl	80028fa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002436:	2b40      	cmp	r3, #64	; 0x40
 8002438:	d10e      	bne.n	8002458 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002444:	2b40      	cmp	r3, #64	; 0x40
 8002446:	d107      	bne.n	8002458 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002450:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 f8f9 	bl	800264a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	f003 0320 	and.w	r3, r3, #32
 8002462:	2b20      	cmp	r3, #32
 8002464:	d10e      	bne.n	8002484 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	f003 0320 	and.w	r3, r3, #32
 8002470:	2b20      	cmp	r3, #32
 8002472:	d107      	bne.n	8002484 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f06f 0220 	mvn.w	r2, #32
 800247c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 fa32 	bl	80028e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002484:	bf00      	nop
 8002486:	3708      	adds	r7, #8
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800249c:	2b01      	cmp	r3, #1
 800249e:	d101      	bne.n	80024a4 <HAL_TIM_ConfigClockSource+0x18>
 80024a0:	2302      	movs	r3, #2
 80024a2:	e0b3      	b.n	800260c <HAL_TIM_ConfigClockSource+0x180>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2202      	movs	r2, #2
 80024b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80024c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024ca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68fa      	ldr	r2, [r7, #12]
 80024d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024dc:	d03e      	beq.n	800255c <HAL_TIM_ConfigClockSource+0xd0>
 80024de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024e2:	f200 8087 	bhi.w	80025f4 <HAL_TIM_ConfigClockSource+0x168>
 80024e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024ea:	f000 8085 	beq.w	80025f8 <HAL_TIM_ConfigClockSource+0x16c>
 80024ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024f2:	d87f      	bhi.n	80025f4 <HAL_TIM_ConfigClockSource+0x168>
 80024f4:	2b70      	cmp	r3, #112	; 0x70
 80024f6:	d01a      	beq.n	800252e <HAL_TIM_ConfigClockSource+0xa2>
 80024f8:	2b70      	cmp	r3, #112	; 0x70
 80024fa:	d87b      	bhi.n	80025f4 <HAL_TIM_ConfigClockSource+0x168>
 80024fc:	2b60      	cmp	r3, #96	; 0x60
 80024fe:	d050      	beq.n	80025a2 <HAL_TIM_ConfigClockSource+0x116>
 8002500:	2b60      	cmp	r3, #96	; 0x60
 8002502:	d877      	bhi.n	80025f4 <HAL_TIM_ConfigClockSource+0x168>
 8002504:	2b50      	cmp	r3, #80	; 0x50
 8002506:	d03c      	beq.n	8002582 <HAL_TIM_ConfigClockSource+0xf6>
 8002508:	2b50      	cmp	r3, #80	; 0x50
 800250a:	d873      	bhi.n	80025f4 <HAL_TIM_ConfigClockSource+0x168>
 800250c:	2b40      	cmp	r3, #64	; 0x40
 800250e:	d058      	beq.n	80025c2 <HAL_TIM_ConfigClockSource+0x136>
 8002510:	2b40      	cmp	r3, #64	; 0x40
 8002512:	d86f      	bhi.n	80025f4 <HAL_TIM_ConfigClockSource+0x168>
 8002514:	2b30      	cmp	r3, #48	; 0x30
 8002516:	d064      	beq.n	80025e2 <HAL_TIM_ConfigClockSource+0x156>
 8002518:	2b30      	cmp	r3, #48	; 0x30
 800251a:	d86b      	bhi.n	80025f4 <HAL_TIM_ConfigClockSource+0x168>
 800251c:	2b20      	cmp	r3, #32
 800251e:	d060      	beq.n	80025e2 <HAL_TIM_ConfigClockSource+0x156>
 8002520:	2b20      	cmp	r3, #32
 8002522:	d867      	bhi.n	80025f4 <HAL_TIM_ConfigClockSource+0x168>
 8002524:	2b00      	cmp	r3, #0
 8002526:	d05c      	beq.n	80025e2 <HAL_TIM_ConfigClockSource+0x156>
 8002528:	2b10      	cmp	r3, #16
 800252a:	d05a      	beq.n	80025e2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800252c:	e062      	b.n	80025f4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6818      	ldr	r0, [r3, #0]
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	6899      	ldr	r1, [r3, #8]
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685a      	ldr	r2, [r3, #4]
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	f000 f95c 	bl	80027fa <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002550:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	609a      	str	r2, [r3, #8]
      break;
 800255a:	e04e      	b.n	80025fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6818      	ldr	r0, [r3, #0]
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	6899      	ldr	r1, [r3, #8]
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685a      	ldr	r2, [r3, #4]
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	f000 f945 	bl	80027fa <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	689a      	ldr	r2, [r3, #8]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800257e:	609a      	str	r2, [r3, #8]
      break;
 8002580:	e03b      	b.n	80025fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6818      	ldr	r0, [r3, #0]
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	6859      	ldr	r1, [r3, #4]
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	461a      	mov	r2, r3
 8002590:	f000 f8bc 	bl	800270c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2150      	movs	r1, #80	; 0x50
 800259a:	4618      	mov	r0, r3
 800259c:	f000 f913 	bl	80027c6 <TIM_ITRx_SetConfig>
      break;
 80025a0:	e02b      	b.n	80025fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6818      	ldr	r0, [r3, #0]
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	6859      	ldr	r1, [r3, #4]
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	461a      	mov	r2, r3
 80025b0:	f000 f8da 	bl	8002768 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2160      	movs	r1, #96	; 0x60
 80025ba:	4618      	mov	r0, r3
 80025bc:	f000 f903 	bl	80027c6 <TIM_ITRx_SetConfig>
      break;
 80025c0:	e01b      	b.n	80025fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6818      	ldr	r0, [r3, #0]
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	6859      	ldr	r1, [r3, #4]
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	461a      	mov	r2, r3
 80025d0:	f000 f89c 	bl	800270c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2140      	movs	r1, #64	; 0x40
 80025da:	4618      	mov	r0, r3
 80025dc:	f000 f8f3 	bl	80027c6 <TIM_ITRx_SetConfig>
      break;
 80025e0:	e00b      	b.n	80025fa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4619      	mov	r1, r3
 80025ec:	4610      	mov	r0, r2
 80025ee:	f000 f8ea 	bl	80027c6 <TIM_ITRx_SetConfig>
        break;
 80025f2:	e002      	b.n	80025fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80025f4:	bf00      	nop
 80025f6:	e000      	b.n	80025fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80025f8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2201      	movs	r2, #1
 80025fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800260a:	2300      	movs	r3, #0
}
 800260c:	4618      	mov	r0, r3
 800260e:	3710      	adds	r7, #16
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	bc80      	pop	{r7}
 8002624:	4770      	bx	lr

08002626 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002626:	b480      	push	{r7}
 8002628:	b083      	sub	sp, #12
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800262e:	bf00      	nop
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	bc80      	pop	{r7}
 8002636:	4770      	bx	lr

08002638 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002640:	bf00      	nop
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	bc80      	pop	{r7}
 8002648:	4770      	bx	lr

0800264a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800264a:	b480      	push	{r7}
 800264c:	b083      	sub	sp, #12
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002652:	bf00      	nop
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	bc80      	pop	{r7}
 800265a:	4770      	bx	lr

0800265c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a25      	ldr	r2, [pc, #148]	; (8002704 <TIM_Base_SetConfig+0xa8>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d007      	beq.n	8002684 <TIM_Base_SetConfig+0x28>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800267a:	d003      	beq.n	8002684 <TIM_Base_SetConfig+0x28>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	4a22      	ldr	r2, [pc, #136]	; (8002708 <TIM_Base_SetConfig+0xac>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d108      	bne.n	8002696 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800268a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	4313      	orrs	r3, r2
 8002694:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a1a      	ldr	r2, [pc, #104]	; (8002704 <TIM_Base_SetConfig+0xa8>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d007      	beq.n	80026ae <TIM_Base_SetConfig+0x52>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026a4:	d003      	beq.n	80026ae <TIM_Base_SetConfig+0x52>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a17      	ldr	r2, [pc, #92]	; (8002708 <TIM_Base_SetConfig+0xac>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d108      	bne.n	80026c0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	68fa      	ldr	r2, [r7, #12]
 80026bc:	4313      	orrs	r3, r2
 80026be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	4a07      	ldr	r2, [pc, #28]	; (8002704 <TIM_Base_SetConfig+0xa8>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d103      	bne.n	80026f4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	691a      	ldr	r2, [r3, #16]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	615a      	str	r2, [r3, #20]
}
 80026fa:	bf00      	nop
 80026fc:	3714      	adds	r7, #20
 80026fe:	46bd      	mov	sp, r7
 8002700:	bc80      	pop	{r7}
 8002702:	4770      	bx	lr
 8002704:	40012c00 	.word	0x40012c00
 8002708:	40000400 	.word	0x40000400

0800270c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800270c:	b480      	push	{r7}
 800270e:	b087      	sub	sp, #28
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6a1b      	ldr	r3, [r3, #32]
 800271c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	f023 0201 	bic.w	r2, r3, #1
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002736:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	011b      	lsls	r3, r3, #4
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	4313      	orrs	r3, r2
 8002740:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	f023 030a 	bic.w	r3, r3, #10
 8002748:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	4313      	orrs	r3, r2
 8002750:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	693a      	ldr	r2, [r7, #16]
 8002756:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	697a      	ldr	r2, [r7, #20]
 800275c:	621a      	str	r2, [r3, #32]
}
 800275e:	bf00      	nop
 8002760:	371c      	adds	r7, #28
 8002762:	46bd      	mov	sp, r7
 8002764:	bc80      	pop	{r7}
 8002766:	4770      	bx	lr

08002768 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002768:	b480      	push	{r7}
 800276a:	b087      	sub	sp, #28
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6a1b      	ldr	r3, [r3, #32]
 8002778:	f023 0210 	bic.w	r2, r3, #16
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6a1b      	ldr	r3, [r3, #32]
 800278a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002792:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	031b      	lsls	r3, r3, #12
 8002798:	697a      	ldr	r2, [r7, #20]
 800279a:	4313      	orrs	r3, r2
 800279c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80027a4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	011b      	lsls	r3, r3, #4
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	697a      	ldr	r2, [r7, #20]
 80027b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	621a      	str	r2, [r3, #32]
}
 80027bc:	bf00      	nop
 80027be:	371c      	adds	r7, #28
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bc80      	pop	{r7}
 80027c4:	4770      	bx	lr

080027c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80027c6:	b480      	push	{r7}
 80027c8:	b085      	sub	sp, #20
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
 80027ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80027de:	683a      	ldr	r2, [r7, #0]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	f043 0307 	orr.w	r3, r3, #7
 80027e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	609a      	str	r2, [r3, #8]
}
 80027f0:	bf00      	nop
 80027f2:	3714      	adds	r7, #20
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bc80      	pop	{r7}
 80027f8:	4770      	bx	lr

080027fa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80027fa:	b480      	push	{r7}
 80027fc:	b087      	sub	sp, #28
 80027fe:	af00      	add	r7, sp, #0
 8002800:	60f8      	str	r0, [r7, #12]
 8002802:	60b9      	str	r1, [r7, #8]
 8002804:	607a      	str	r2, [r7, #4]
 8002806:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002814:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	021a      	lsls	r2, r3, #8
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	431a      	orrs	r2, r3
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	4313      	orrs	r3, r2
 8002822:	697a      	ldr	r2, [r7, #20]
 8002824:	4313      	orrs	r3, r2
 8002826:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	609a      	str	r2, [r3, #8]
}
 800282e:	bf00      	nop
 8002830:	371c      	adds	r7, #28
 8002832:	46bd      	mov	sp, r7
 8002834:	bc80      	pop	{r7}
 8002836:	4770      	bx	lr

08002838 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002838:	b480      	push	{r7}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002848:	2b01      	cmp	r3, #1
 800284a:	d101      	bne.n	8002850 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800284c:	2302      	movs	r3, #2
 800284e:	e041      	b.n	80028d4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2202      	movs	r2, #2
 800285c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002876:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	4313      	orrs	r3, r2
 8002880:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a14      	ldr	r2, [pc, #80]	; (80028e0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d009      	beq.n	80028a8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800289c:	d004      	beq.n	80028a8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a10      	ldr	r2, [pc, #64]	; (80028e4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d10c      	bne.n	80028c2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	68ba      	ldr	r2, [r7, #8]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	68ba      	ldr	r2, [r7, #8]
 80028c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2201      	movs	r2, #1
 80028c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3714      	adds	r7, #20
 80028d8:	46bd      	mov	sp, r7
 80028da:	bc80      	pop	{r7}
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	40012c00 	.word	0x40012c00
 80028e4:	40000400 	.word	0x40000400

080028e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bc80      	pop	{r7}
 80028f8:	4770      	bx	lr

080028fa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b083      	sub	sp, #12
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002902:	bf00      	nop
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	bc80      	pop	{r7}
 800290a:	4770      	bx	lr

0800290c <__libc_init_array>:
 800290c:	b570      	push	{r4, r5, r6, lr}
 800290e:	2600      	movs	r6, #0
 8002910:	4d0c      	ldr	r5, [pc, #48]	; (8002944 <__libc_init_array+0x38>)
 8002912:	4c0d      	ldr	r4, [pc, #52]	; (8002948 <__libc_init_array+0x3c>)
 8002914:	1b64      	subs	r4, r4, r5
 8002916:	10a4      	asrs	r4, r4, #2
 8002918:	42a6      	cmp	r6, r4
 800291a:	d109      	bne.n	8002930 <__libc_init_array+0x24>
 800291c:	f000 f822 	bl	8002964 <_init>
 8002920:	2600      	movs	r6, #0
 8002922:	4d0a      	ldr	r5, [pc, #40]	; (800294c <__libc_init_array+0x40>)
 8002924:	4c0a      	ldr	r4, [pc, #40]	; (8002950 <__libc_init_array+0x44>)
 8002926:	1b64      	subs	r4, r4, r5
 8002928:	10a4      	asrs	r4, r4, #2
 800292a:	42a6      	cmp	r6, r4
 800292c:	d105      	bne.n	800293a <__libc_init_array+0x2e>
 800292e:	bd70      	pop	{r4, r5, r6, pc}
 8002930:	f855 3b04 	ldr.w	r3, [r5], #4
 8002934:	4798      	blx	r3
 8002936:	3601      	adds	r6, #1
 8002938:	e7ee      	b.n	8002918 <__libc_init_array+0xc>
 800293a:	f855 3b04 	ldr.w	r3, [r5], #4
 800293e:	4798      	blx	r3
 8002940:	3601      	adds	r6, #1
 8002942:	e7f2      	b.n	800292a <__libc_init_array+0x1e>
 8002944:	080029a4 	.word	0x080029a4
 8002948:	080029a4 	.word	0x080029a4
 800294c:	080029a4 	.word	0x080029a4
 8002950:	080029a8 	.word	0x080029a8

08002954 <memset>:
 8002954:	4603      	mov	r3, r0
 8002956:	4402      	add	r2, r0
 8002958:	4293      	cmp	r3, r2
 800295a:	d100      	bne.n	800295e <memset+0xa>
 800295c:	4770      	bx	lr
 800295e:	f803 1b01 	strb.w	r1, [r3], #1
 8002962:	e7f9      	b.n	8002958 <memset+0x4>

08002964 <_init>:
 8002964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002966:	bf00      	nop
 8002968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800296a:	bc08      	pop	{r3}
 800296c:	469e      	mov	lr, r3
 800296e:	4770      	bx	lr

08002970 <_fini>:
 8002970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002972:	bf00      	nop
 8002974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002976:	bc08      	pop	{r3}
 8002978:	469e      	mov	lr, r3
 800297a:	4770      	bx	lr
